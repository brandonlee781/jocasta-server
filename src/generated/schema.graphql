### This file was autogenerated by GraphQL Nexus
### Do not make changes to this file directly


type Armor {
  attachments(after: ID, before: ID, first: Int, last: Int, skip: Int): [Attachment!]!
  condition: GearCondition
  defense: DefenseAttribute
  description: String
  encumberance: Int!
  hardPoints: Int!
  id: ID!
  name: String!
  quantity: Int!
  rarity: Int!
  soak: Int!
  wearing: Boolean!
}

input ArmorCreateManyWithoutArmorInput {
  connect: [ArmorWhereUniqueInput!]
  create: [ArmorCreateWithoutCharacterInput!]
}

input ArmorCreateManyWithoutArmorsInput {
  connect: [ArmorWhereUniqueInput!]
  create: [ArmorCreateWithoutDefenseInput!]
}

input ArmorCreateOneWithoutArmorInput {
  connect: ArmorWhereUniqueInput
  create: ArmorCreateWithoutAttachmentsInput
}

input ArmorCreateWithoutAttachmentsInput {
  character: CharacterCreateOneWithoutCharacterInput
  condition: GearCondition
  defense: DefenseAttributeCreateOneWithoutDefenseInput
  description: String
  encumberance: Int
  hardPoints: Int
  id: ID
  name: String!
  quantity: Int
  rarity: Int
  soak: Int!
  wearing: Boolean!
}

input ArmorCreateWithoutCharacterInput {
  attachments: AttachmentCreateManyWithoutAttachmentsInput
  condition: GearCondition
  defense: DefenseAttributeCreateOneWithoutDefenseInput
  description: String
  encumberance: Int
  hardPoints: Int
  id: ID
  name: String!
  quantity: Int
  rarity: Int
  soak: Int!
  wearing: Boolean!
}

input ArmorCreateWithoutDefenseInput {
  attachments: AttachmentCreateManyWithoutAttachmentsInput
  character: CharacterCreateOneWithoutCharacterInput
  condition: GearCondition
  description: String
  encumberance: Int
  hardPoints: Int
  id: ID
  name: String!
  quantity: Int
  rarity: Int
  soak: Int!
  wearing: Boolean!
}

input ArmorFilter {
  every: ArmorWhereInput
  none: ArmorWhereInput
  some: ArmorWhereInput
}

input ArmorScalarWhereInput {
  AND: [ArmorScalarWhereInput!]
  attachments: AttachmentFilter
  condition: GearCondition
  description: NullableStringFilter
  encumberance: IntFilter
  hardPoints: IntFilter
  id: StringFilter
  name: StringFilter
  NOT: [ArmorScalarWhereInput!]
  OR: [ArmorScalarWhereInput!]
  quantity: IntFilter
  rarity: IntFilter
  soak: IntFilter
  wearing: BooleanFilter
}

input ArmorUpdateManyDataInput {
  condition: GearCondition
  description: String
  encumberance: Int
  hardPoints: Int
  id: ID
  name: String
  quantity: Int
  rarity: Int
  soak: Int
  wearing: Boolean
}

input ArmorUpdateManyWithoutCharacterInput {
  connect: [ArmorWhereUniqueInput!]
  create: [ArmorCreateWithoutCharacterInput!]
  delete: [ArmorWhereUniqueInput!]
  deleteMany: [ArmorScalarWhereInput!]
  disconnect: [ArmorWhereUniqueInput!]
  set: [ArmorWhereUniqueInput!]
  update: [ArmorUpdateWithWhereUniqueWithoutCharacterInput!]
  updateMany: [ArmorUpdateManyWithWhereNestedInput!]
  upsert: [ArmorUpsertWithWhereUniqueWithoutCharacterInput!]
}

input ArmorUpdateManyWithoutDefenseInput {
  connect: [ArmorWhereUniqueInput!]
  create: [ArmorCreateWithoutDefenseInput!]
  delete: [ArmorWhereUniqueInput!]
  deleteMany: [ArmorScalarWhereInput!]
  disconnect: [ArmorWhereUniqueInput!]
  set: [ArmorWhereUniqueInput!]
  update: [ArmorUpdateWithWhereUniqueWithoutDefenseInput!]
  updateMany: [ArmorUpdateManyWithWhereNestedInput!]
  upsert: [ArmorUpsertWithWhereUniqueWithoutDefenseInput!]
}

input ArmorUpdateManyWithWhereNestedInput {
  data: ArmorUpdateManyDataInput!
  where: ArmorScalarWhereInput!
}

input ArmorUpdateOneWithoutAttachmentsInput {
  connect: ArmorWhereUniqueInput
  create: ArmorCreateWithoutAttachmentsInput
  delete: Boolean
  disconnect: Boolean
  update: ArmorUpdateWithoutAttachmentsDataInput
  upsert: ArmorUpsertWithoutAttachmentsInput
}

input ArmorUpdateWithoutAttachmentsDataInput {
  character: CharacterUpdateOneWithoutArmorInput
  condition: GearCondition
  defense: DefenseAttributeUpdateOneWithoutArmorsInput
  description: String
  encumberance: Int
  hardPoints: Int
  id: ID
  name: String
  quantity: Int
  rarity: Int
  soak: Int
  wearing: Boolean
}

input ArmorUpdateWithoutCharacterDataInput {
  attachments: AttachmentUpdateManyWithoutArmorInput
  condition: GearCondition
  defense: DefenseAttributeUpdateOneWithoutArmorsInput
  description: String
  encumberance: Int
  hardPoints: Int
  id: ID
  name: String
  quantity: Int
  rarity: Int
  soak: Int
  wearing: Boolean
}

input ArmorUpdateWithoutDefenseDataInput {
  attachments: AttachmentUpdateManyWithoutArmorInput
  character: CharacterUpdateOneWithoutArmorInput
  condition: GearCondition
  description: String
  encumberance: Int
  hardPoints: Int
  id: ID
  name: String
  quantity: Int
  rarity: Int
  soak: Int
  wearing: Boolean
}

input ArmorUpdateWithWhereUniqueWithoutCharacterInput {
  data: ArmorUpdateWithoutCharacterDataInput!
  where: ArmorWhereUniqueInput!
}

input ArmorUpdateWithWhereUniqueWithoutDefenseInput {
  data: ArmorUpdateWithoutDefenseDataInput!
  where: ArmorWhereUniqueInput!
}

input ArmorUpsertWithoutAttachmentsInput {
  create: ArmorCreateWithoutAttachmentsInput!
  update: ArmorUpdateWithoutAttachmentsDataInput!
}

input ArmorUpsertWithWhereUniqueWithoutCharacterInput {
  create: ArmorCreateWithoutCharacterInput!
  update: ArmorUpdateWithoutCharacterDataInput!
  where: ArmorWhereUniqueInput!
}

input ArmorUpsertWithWhereUniqueWithoutDefenseInput {
  create: ArmorCreateWithoutDefenseInput!
  update: ArmorUpdateWithoutDefenseDataInput!
  where: ArmorWhereUniqueInput!
}

input ArmorWhereInput {
  AND: [ArmorWhereInput!]
  attachments: AttachmentFilter
  character: CharacterWhereInput
  condition: GearCondition
  defense: DefenseAttributeWhereInput
  description: NullableStringFilter
  encumberance: IntFilter
  hardPoints: IntFilter
  id: StringFilter
  name: StringFilter
  NOT: [ArmorWhereInput!]
  OR: [ArmorWhereInput!]
  quantity: IntFilter
  rarity: IntFilter
  soak: IntFilter
  wearing: BooleanFilter
}

input ArmorWhereUniqueInput {
  id: ID
}

type Attachment {
  base: String!
  hardPoints: Int!
  id: ID!
  modifications: String!
  name: String!
}

input AttachmentCreateManyWithoutAttachmentsInput {
  connect: [AttachmentWhereUniqueInput!]
  create: [AttachmentCreateWithoutArmorInput!]
}

input AttachmentCreateWithoutArmorInput {
  base: String!
  hardPoints: Int!
  id: ID
  modifications: String!
  name: String!
  weapon: WeaponCreateOneWithoutWeaponInput
}

input AttachmentCreateWithoutWeaponInput {
  armor: ArmorCreateOneWithoutArmorInput
  base: String!
  hardPoints: Int!
  id: ID
  modifications: String!
  name: String!
}

input AttachmentFilter {
  every: AttachmentWhereInput
  none: AttachmentWhereInput
  some: AttachmentWhereInput
}

input AttachmentScalarWhereInput {
  AND: [AttachmentScalarWhereInput!]
  base: StringFilter
  hardPoints: IntFilter
  id: StringFilter
  modifications: StringFilter
  name: StringFilter
  NOT: [AttachmentScalarWhereInput!]
  OR: [AttachmentScalarWhereInput!]
}

input AttachmentUpdateManyDataInput {
  base: String
  hardPoints: Int
  id: ID
  modifications: String
  name: String
}

input AttachmentUpdateManyWithoutArmorInput {
  connect: [AttachmentWhereUniqueInput!]
  create: [AttachmentCreateWithoutArmorInput!]
  delete: [AttachmentWhereUniqueInput!]
  deleteMany: [AttachmentScalarWhereInput!]
  disconnect: [AttachmentWhereUniqueInput!]
  set: [AttachmentWhereUniqueInput!]
  update: [AttachmentUpdateWithWhereUniqueWithoutArmorInput!]
  updateMany: [AttachmentUpdateManyWithWhereNestedInput!]
  upsert: [AttachmentUpsertWithWhereUniqueWithoutArmorInput!]
}

input AttachmentUpdateManyWithoutWeaponInput {
  connect: [AttachmentWhereUniqueInput!]
  create: [AttachmentCreateWithoutWeaponInput!]
  delete: [AttachmentWhereUniqueInput!]
  deleteMany: [AttachmentScalarWhereInput!]
  disconnect: [AttachmentWhereUniqueInput!]
  set: [AttachmentWhereUniqueInput!]
  update: [AttachmentUpdateWithWhereUniqueWithoutWeaponInput!]
  updateMany: [AttachmentUpdateManyWithWhereNestedInput!]
  upsert: [AttachmentUpsertWithWhereUniqueWithoutWeaponInput!]
}

input AttachmentUpdateManyWithWhereNestedInput {
  data: AttachmentUpdateManyDataInput!
  where: AttachmentScalarWhereInput!
}

input AttachmentUpdateWithoutArmorDataInput {
  base: String
  hardPoints: Int
  id: ID
  modifications: String
  name: String
  weapon: WeaponUpdateOneWithoutAttachmentsInput
}

input AttachmentUpdateWithoutWeaponDataInput {
  armor: ArmorUpdateOneWithoutAttachmentsInput
  base: String
  hardPoints: Int
  id: ID
  modifications: String
  name: String
}

input AttachmentUpdateWithWhereUniqueWithoutArmorInput {
  data: AttachmentUpdateWithoutArmorDataInput!
  where: AttachmentWhereUniqueInput!
}

input AttachmentUpdateWithWhereUniqueWithoutWeaponInput {
  data: AttachmentUpdateWithoutWeaponDataInput!
  where: AttachmentWhereUniqueInput!
}

input AttachmentUpsertWithWhereUniqueWithoutArmorInput {
  create: AttachmentCreateWithoutArmorInput!
  update: AttachmentUpdateWithoutArmorDataInput!
  where: AttachmentWhereUniqueInput!
}

input AttachmentUpsertWithWhereUniqueWithoutWeaponInput {
  create: AttachmentCreateWithoutWeaponInput!
  update: AttachmentUpdateWithoutWeaponDataInput!
  where: AttachmentWhereUniqueInput!
}

input AttachmentWhereInput {
  AND: [AttachmentWhereInput!]
  armor: ArmorWhereInput
  base: StringFilter
  hardPoints: IntFilter
  id: StringFilter
  modifications: StringFilter
  name: StringFilter
  NOT: [AttachmentWhereInput!]
  OR: [AttachmentWhereInput!]
  weapon: WeaponWhereInput
}

input AttachmentWhereUniqueInput {
  id: ID
}

type AuthPayload {
  token: String!
  user: User!
}

input BooleanFilter {
  equals: Boolean
  not: Boolean
}

type Career {
  id: Int!
  name: String!
  skills(after: Int, before: Int, first: Int, last: Int, skip: Int): [Skill!]!
  specializations(after: Int, before: Int, first: Int, last: Int, orderBy: CareerSpecializationsOrderByInput, skip: Int): [Specialization!]!
}

input CareerCreateManyWithoutCareersInput {
  connect: [CareerWhereUniqueInput!]
  create: [CareerCreateWithoutSkillsInput!]
}

input CareerCreateOneWithoutCareerInput {
  connect: CareerWhereUniqueInput
  create: CareerCreateWithoutSpecializationsInput
}

input CareerCreateWithoutSkillsInput {
  id: Int!
  name: String!
  specializations: SpecializationCreateManyWithoutSpecializationsInput
}

input CareerCreateWithoutSpecializationsInput {
  id: Int!
  name: String!
  skills: SkillCreateManyWithoutSkillsInput
}

input CareerFilter {
  every: CareerWhereInput
  none: CareerWhereInput
  some: CareerWhereInput
}

input CareerScalarWhereInput {
  AND: [CareerScalarWhereInput!]
  id: IntFilter
  name: StringFilter
  NOT: [CareerScalarWhereInput!]
  OR: [CareerScalarWhereInput!]
  skills: SkillFilter
  specializations: SpecializationFilter
}

input CareerSpecializationsOrderByInput {
  id: OrderByArg
  name: OrderByArg
}

input CareerUpdateManyDataInput {
  id: Int
  name: String
}

input CareerUpdateManyWithoutSkillsInput {
  connect: [CareerWhereUniqueInput!]
  create: [CareerCreateWithoutSkillsInput!]
  delete: [CareerWhereUniqueInput!]
  deleteMany: [CareerScalarWhereInput!]
  disconnect: [CareerWhereUniqueInput!]
  set: [CareerWhereUniqueInput!]
  update: [CareerUpdateWithWhereUniqueWithoutSkillsInput!]
  updateMany: [CareerUpdateManyWithWhereNestedInput!]
  upsert: [CareerUpsertWithWhereUniqueWithoutSkillsInput!]
}

input CareerUpdateManyWithWhereNestedInput {
  data: CareerUpdateManyDataInput!
  where: CareerScalarWhereInput!
}

input CareerUpdateOneWithoutSpecializationsInput {
  connect: CareerWhereUniqueInput
  create: CareerCreateWithoutSpecializationsInput
  delete: Boolean
  disconnect: Boolean
  update: CareerUpdateWithoutSpecializationsDataInput
  upsert: CareerUpsertWithoutSpecializationsInput
}

input CareerUpdateWithoutSkillsDataInput {
  id: Int
  name: String
  specializations: SpecializationUpdateManyWithoutCareerInput
}

input CareerUpdateWithoutSpecializationsDataInput {
  id: Int
  name: String
  skills: SkillUpdateManyWithoutCareersInput
}

input CareerUpdateWithWhereUniqueWithoutSkillsInput {
  data: CareerUpdateWithoutSkillsDataInput!
  where: CareerWhereUniqueInput!
}

input CareerUpsertWithoutSpecializationsInput {
  create: CareerCreateWithoutSpecializationsInput!
  update: CareerUpdateWithoutSpecializationsDataInput!
}

input CareerUpsertWithWhereUniqueWithoutSkillsInput {
  create: CareerCreateWithoutSkillsInput!
  update: CareerUpdateWithoutSkillsDataInput!
  where: CareerWhereUniqueInput!
}

input CareerWhereInput {
  AND: [CareerWhereInput!]
  id: IntFilter
  name: StringFilter
  NOT: [CareerWhereInput!]
  OR: [CareerWhereInput!]
  skills: SkillFilter
  specializations: SpecializationFilter
}

input CareerWhereUniqueInput {
  id: Int
}

type Character {
  armor(after: ID, before: ID, first: Int, last: Int, skip: Int): [Armor!]!
  background: String
  career: String!
  characteristics: Characteristic
  credits: Int
  derivedAttributes: DerivedAttribute
  description: String
  duties(after: ID, before: ID, first: Int, last: Int, skip: Int): [Duty!]!
  encumberance: Threshold
  experience: Experience
  gear(after: ID, before: ID, first: Int, last: Int, skip: Int): [Gear!]!
  id: ID!
  imageUrl: String
  injuries: String
  motivation: String
  name: String!
  notes: String
  resources: String
  skills: [CharacterSkills!]!
  specializations(after: Int, before: Int, first: Int, last: Int, skip: Int): [Specialization!]!
  species: String!
  system: System!
  talents: [TalentTreeNode!]!
  user: User!
  weapons(after: ID, before: ID, first: Int, last: Int, skip: Int): [Weapon!]!
}

input CharacterCreateInput {
  armor: ArmorCreateManyWithoutArmorInput
  background: String
  career: String!
  characteristics: CharacteristicCreateOneWithoutCharacteristicsInput
  createdAt: DateTime
  credits: Int
  derivedAttributes: DerivedAttributeCreateOneWithoutDerivedAttributesInput
  description: String
  duties: DutyCreateManyWithoutDutiesInput
  encumberance: ThresholdCreateOneWithoutEncumberanceInput
  experience: ExperienceCreateOneWithoutExperienceInput
  gear: GearCreateManyWithoutGearInput
  id: ID
  imageUrl: String
  injuries: String
  motivation: String
  name: String!
  notes: String
  resources: String
  skills: CharacterSkillCreateManyWithoutSkillsInput
  specializations: SpecializationCreateManyWithoutSpecializationsInput
  species: String!
  system: System!
  talents: CharacterTalentCreateManyWithoutTalentsInput
  updatedAt: DateTime
  user: UserCreateOneWithoutUserInput!
  weapons: WeaponCreateManyWithoutWeaponsInput
}

input CharacterCreateManyWithoutCharactersInput {
  connect: [CharacterWhereUniqueInput!]
  create: [CharacterCreateWithoutSpecializationsInput!]
}

input CharacterCreateOneWithoutCharacterInput {
  connect: CharacterWhereUniqueInput
  create: CharacterCreateWithoutWeaponsInput
}

input CharacterCreateWithoutArmorInput {
  background: String
  career: String!
  characteristics: CharacteristicCreateOneWithoutCharacteristicsInput
  createdAt: DateTime
  credits: Int
  derivedAttributes: DerivedAttributeCreateOneWithoutDerivedAttributesInput
  description: String
  duties: DutyCreateManyWithoutDutiesInput
  encumberance: ThresholdCreateOneWithoutEncumberanceInput
  experience: ExperienceCreateOneWithoutExperienceInput
  gear: GearCreateManyWithoutGearInput
  id: ID
  imageUrl: String
  injuries: String
  motivation: String
  name: String!
  notes: String
  resources: String
  skills: CharacterSkillCreateManyWithoutSkillsInput
  specializations: SpecializationCreateManyWithoutSpecializationsInput
  species: String!
  system: System!
  talents: CharacterTalentCreateManyWithoutTalentsInput
  updatedAt: DateTime
  user: UserCreateOneWithoutUserInput!
  weapons: WeaponCreateManyWithoutWeaponsInput
}

input CharacterCreateWithoutDerivedAttributesInput {
  armor: ArmorCreateManyWithoutArmorInput
  background: String
  career: String!
  characteristics: CharacteristicCreateOneWithoutCharacteristicsInput
  createdAt: DateTime
  credits: Int
  description: String
  duties: DutyCreateManyWithoutDutiesInput
  encumberance: ThresholdCreateOneWithoutEncumberanceInput
  experience: ExperienceCreateOneWithoutExperienceInput
  gear: GearCreateManyWithoutGearInput
  id: ID
  imageUrl: String
  injuries: String
  motivation: String
  name: String!
  notes: String
  resources: String
  skills: CharacterSkillCreateManyWithoutSkillsInput
  specializations: SpecializationCreateManyWithoutSpecializationsInput
  species: String!
  system: System!
  talents: CharacterTalentCreateManyWithoutTalentsInput
  updatedAt: DateTime
  user: UserCreateOneWithoutUserInput!
  weapons: WeaponCreateManyWithoutWeaponsInput
}

input CharacterCreateWithoutEncumberanceInput {
  armor: ArmorCreateManyWithoutArmorInput
  background: String
  career: String!
  characteristics: CharacteristicCreateOneWithoutCharacteristicsInput
  createdAt: DateTime
  credits: Int
  derivedAttributes: DerivedAttributeCreateOneWithoutDerivedAttributesInput
  description: String
  duties: DutyCreateManyWithoutDutiesInput
  experience: ExperienceCreateOneWithoutExperienceInput
  gear: GearCreateManyWithoutGearInput
  id: ID
  imageUrl: String
  injuries: String
  motivation: String
  name: String!
  notes: String
  resources: String
  skills: CharacterSkillCreateManyWithoutSkillsInput
  specializations: SpecializationCreateManyWithoutSpecializationsInput
  species: String!
  system: System!
  talents: CharacterTalentCreateManyWithoutTalentsInput
  updatedAt: DateTime
  user: UserCreateOneWithoutUserInput!
  weapons: WeaponCreateManyWithoutWeaponsInput
}

input CharacterCreateWithoutSkillsInput {
  armor: ArmorCreateManyWithoutArmorInput
  background: String
  career: String!
  characteristics: CharacteristicCreateOneWithoutCharacteristicsInput
  createdAt: DateTime
  credits: Int
  derivedAttributes: DerivedAttributeCreateOneWithoutDerivedAttributesInput
  description: String
  duties: DutyCreateManyWithoutDutiesInput
  encumberance: ThresholdCreateOneWithoutEncumberanceInput
  experience: ExperienceCreateOneWithoutExperienceInput
  gear: GearCreateManyWithoutGearInput
  id: ID
  imageUrl: String
  injuries: String
  motivation: String
  name: String!
  notes: String
  resources: String
  specializations: SpecializationCreateManyWithoutSpecializationsInput
  species: String!
  system: System!
  talents: CharacterTalentCreateManyWithoutTalentsInput
  updatedAt: DateTime
  user: UserCreateOneWithoutUserInput!
  weapons: WeaponCreateManyWithoutWeaponsInput
}

input CharacterCreateWithoutSpecializationsInput {
  armor: ArmorCreateManyWithoutArmorInput
  background: String
  career: String!
  characteristics: CharacteristicCreateOneWithoutCharacteristicsInput
  createdAt: DateTime
  credits: Int
  derivedAttributes: DerivedAttributeCreateOneWithoutDerivedAttributesInput
  description: String
  duties: DutyCreateManyWithoutDutiesInput
  encumberance: ThresholdCreateOneWithoutEncumberanceInput
  experience: ExperienceCreateOneWithoutExperienceInput
  gear: GearCreateManyWithoutGearInput
  id: ID
  imageUrl: String
  injuries: String
  motivation: String
  name: String!
  notes: String
  resources: String
  skills: CharacterSkillCreateManyWithoutSkillsInput
  species: String!
  system: System!
  talents: CharacterTalentCreateManyWithoutTalentsInput
  updatedAt: DateTime
  user: UserCreateOneWithoutUserInput!
  weapons: WeaponCreateManyWithoutWeaponsInput
}

input CharacterCreateWithoutTalentsInput {
  armor: ArmorCreateManyWithoutArmorInput
  background: String
  career: String!
  characteristics: CharacteristicCreateOneWithoutCharacteristicsInput
  createdAt: DateTime
  credits: Int
  derivedAttributes: DerivedAttributeCreateOneWithoutDerivedAttributesInput
  description: String
  duties: DutyCreateManyWithoutDutiesInput
  encumberance: ThresholdCreateOneWithoutEncumberanceInput
  experience: ExperienceCreateOneWithoutExperienceInput
  gear: GearCreateManyWithoutGearInput
  id: ID
  imageUrl: String
  injuries: String
  motivation: String
  name: String!
  notes: String
  resources: String
  skills: CharacterSkillCreateManyWithoutSkillsInput
  specializations: SpecializationCreateManyWithoutSpecializationsInput
  species: String!
  system: System!
  updatedAt: DateTime
  user: UserCreateOneWithoutUserInput!
  weapons: WeaponCreateManyWithoutWeaponsInput
}

input CharacterCreateWithoutWeaponsInput {
  armor: ArmorCreateManyWithoutArmorInput
  background: String
  career: String!
  characteristics: CharacteristicCreateOneWithoutCharacteristicsInput
  createdAt: DateTime
  credits: Int
  derivedAttributes: DerivedAttributeCreateOneWithoutDerivedAttributesInput
  description: String
  duties: DutyCreateManyWithoutDutiesInput
  encumberance: ThresholdCreateOneWithoutEncumberanceInput
  experience: ExperienceCreateOneWithoutExperienceInput
  gear: GearCreateManyWithoutGearInput
  id: ID
  imageUrl: String
  injuries: String
  motivation: String
  name: String!
  notes: String
  resources: String
  skills: CharacterSkillCreateManyWithoutSkillsInput
  specializations: SpecializationCreateManyWithoutSpecializationsInput
  species: String!
  system: System!
  talents: CharacterTalentCreateManyWithoutTalentsInput
  updatedAt: DateTime
  user: UserCreateOneWithoutUserInput!
}

input CharacterFilter {
  every: CharacterWhereInput
  none: CharacterWhereInput
  some: CharacterWhereInput
}

type Characteristic {
  Agility: Int!
  Brawn: Int!
  Cunning: Int!
  id: ID!
  Intellect: Int!
  Presence: Int!
  Willpower: Int!
}

input CharacteristicCreateOneWithoutCharacteristicsInput {
  connect: CharacteristicWhereUniqueInput
  create: CharacteristicCreateWithoutCharactersInput
}

input CharacteristicCreateWithoutCharactersInput {
  Agility: Int
  Brawn: Int
  Cunning: Int
  id: ID
  Intellect: Int
  Presence: Int
  Willpower: Int
}

enum CharacteristicName {
  Agility
  Brawn
  Cunning
  Intellect
  Presence
  Willpower
}

input CharacteristicUpdateOneWithoutCharactersInput {
  connect: CharacteristicWhereUniqueInput
  create: CharacteristicCreateWithoutCharactersInput
  delete: Boolean
  disconnect: Boolean
  update: CharacteristicUpdateWithoutCharactersDataInput
  upsert: CharacteristicUpsertWithoutCharactersInput
}

input CharacteristicUpdateWithoutCharactersDataInput {
  Agility: Int
  Brawn: Int
  Cunning: Int
  id: ID
  Intellect: Int
  Presence: Int
  Willpower: Int
}

input CharacteristicUpsertWithoutCharactersInput {
  create: CharacteristicCreateWithoutCharactersInput!
  update: CharacteristicUpdateWithoutCharactersDataInput!
}

input CharacteristicWhereInput {
  Agility: IntFilter
  AND: [CharacteristicWhereInput!]
  Brawn: IntFilter
  characters: CharacterFilter
  Cunning: IntFilter
  id: StringFilter
  Intellect: IntFilter
  NOT: [CharacteristicWhereInput!]
  OR: [CharacteristicWhereInput!]
  Presence: IntFilter
  Willpower: IntFilter
}

input CharacteristicWhereUniqueInput {
  id: ID
}

input CharacterScalarWhereInput {
  AND: [CharacterScalarWhereInput!]
  armor: ArmorFilter
  background: NullableStringFilter
  career: StringFilter
  createdAt: DateTimeFilter
  credits: NullableIntFilter
  description: NullableStringFilter
  duties: DutyFilter
  gear: GearFilter
  id: StringFilter
  imageUrl: NullableStringFilter
  injuries: NullableStringFilter
  motivation: NullableStringFilter
  name: StringFilter
  NOT: [CharacterScalarWhereInput!]
  notes: NullableStringFilter
  OR: [CharacterScalarWhereInput!]
  resources: NullableStringFilter
  skills: CharacterSkillFilter
  specializations: SpecializationFilter
  species: StringFilter
  system: System
  talents: CharacterTalentFilter
  updatedAt: DateTimeFilter
  weapons: WeaponFilter
}

input CharacterSkillCreateManyWithoutCharacterSkillsInput {
  connect: [CharacterSkillWhereUniqueInput!]
  create: [CharacterSkillCreateWithoutSkillInput!]
}

input CharacterSkillCreateManyWithoutSkillsInput {
  connect: [CharacterSkillWhereUniqueInput!]
  create: [CharacterSkillCreateWithoutCharacterInput!]
}

input CharacterSkillCreateWithoutCharacterInput {
  career: Boolean
  id: ID
  rank: Int
  skill: SkillCreateOneWithoutSkillInput!
}

input CharacterSkillCreateWithoutSkillInput {
  career: Boolean
  character: CharacterCreateOneWithoutCharacterInput
  id: ID
  rank: Int
}

input CharacterSkillFilter {
  every: CharacterSkillWhereInput
  none: CharacterSkillWhereInput
  some: CharacterSkillWhereInput
}

type CharacterSkills {
  career: Boolean!
  characteristic: CharacteristicName!
  id: ID!
  name: String!
  rank: Int!
  skillId: Int!
  type: SkillType!
}

input CharacterSkillScalarWhereInput {
  AND: [CharacterSkillScalarWhereInput!]
  career: BooleanFilter
  id: StringFilter
  NOT: [CharacterSkillScalarWhereInput!]
  OR: [CharacterSkillScalarWhereInput!]
  rank: IntFilter
}

input CharacterSkillUpdateManyDataInput {
  career: Boolean
  id: ID
  rank: Int
}

input CharacterSkillUpdateManyWithoutCharacterInput {
  connect: [CharacterSkillWhereUniqueInput!]
  create: [CharacterSkillCreateWithoutCharacterInput!]
  delete: [CharacterSkillWhereUniqueInput!]
  deleteMany: [CharacterSkillScalarWhereInput!]
  disconnect: [CharacterSkillWhereUniqueInput!]
  set: [CharacterSkillWhereUniqueInput!]
  update: [CharacterSkillUpdateWithWhereUniqueWithoutCharacterInput!]
  updateMany: [CharacterSkillUpdateManyWithWhereNestedInput!]
  upsert: [CharacterSkillUpsertWithWhereUniqueWithoutCharacterInput!]
}

input CharacterSkillUpdateManyWithoutSkillInput {
  connect: [CharacterSkillWhereUniqueInput!]
  create: [CharacterSkillCreateWithoutSkillInput!]
  delete: [CharacterSkillWhereUniqueInput!]
  deleteMany: [CharacterSkillScalarWhereInput!]
  disconnect: [CharacterSkillWhereUniqueInput!]
  set: [CharacterSkillWhereUniqueInput!]
  update: [CharacterSkillUpdateWithWhereUniqueWithoutSkillInput!]
  updateMany: [CharacterSkillUpdateManyWithWhereNestedInput!]
  upsert: [CharacterSkillUpsertWithWhereUniqueWithoutSkillInput!]
}

input CharacterSkillUpdateManyWithWhereNestedInput {
  data: CharacterSkillUpdateManyDataInput!
  where: CharacterSkillScalarWhereInput!
}

input CharacterSkillUpdateWithoutCharacterDataInput {
  career: Boolean
  id: ID
  rank: Int
  skill: SkillUpdateOneRequiredWithoutCharacterSkillsInput
}

input CharacterSkillUpdateWithoutSkillDataInput {
  career: Boolean
  character: CharacterUpdateOneWithoutSkillsInput
  id: ID
  rank: Int
}

input CharacterSkillUpdateWithWhereUniqueWithoutCharacterInput {
  data: CharacterSkillUpdateWithoutCharacterDataInput!
  where: CharacterSkillWhereUniqueInput!
}

input CharacterSkillUpdateWithWhereUniqueWithoutSkillInput {
  data: CharacterSkillUpdateWithoutSkillDataInput!
  where: CharacterSkillWhereUniqueInput!
}

input CharacterSkillUpsertWithWhereUniqueWithoutCharacterInput {
  create: CharacterSkillCreateWithoutCharacterInput!
  update: CharacterSkillUpdateWithoutCharacterDataInput!
  where: CharacterSkillWhereUniqueInput!
}

input CharacterSkillUpsertWithWhereUniqueWithoutSkillInput {
  create: CharacterSkillCreateWithoutSkillInput!
  update: CharacterSkillUpdateWithoutSkillDataInput!
  where: CharacterSkillWhereUniqueInput!
}

input CharacterSkillWhereInput {
  AND: [CharacterSkillWhereInput!]
  career: BooleanFilter
  character: CharacterWhereInput
  id: StringFilter
  NOT: [CharacterSkillWhereInput!]
  OR: [CharacterSkillWhereInput!]
  rank: IntFilter
  skill: SkillWhereInput
}

input CharacterSkillWhereUniqueInput {
  id: ID
}

type CharacterTalent {
  id: ID!
  talent: TalentTreeNode!
}

input CharacterTalentCreateManyWithoutCharacterTalentsInput {
  connect: [CharacterTalentWhereUniqueInput!]
  create: [CharacterTalentCreateWithoutTalentInput!]
}

input CharacterTalentCreateManyWithoutTalentsInput {
  connect: [CharacterTalentWhereUniqueInput!]
  create: [CharacterTalentCreateWithoutCharacterInput!]
}

input CharacterTalentCreateWithoutCharacterInput {
  id: ID
  talent: TalentTreeNodeCreateOneWithoutTalentInput!
}

input CharacterTalentCreateWithoutTalentInput {
  character: CharacterCreateOneWithoutCharacterInput
  id: ID
}

input CharacterTalentFilter {
  every: CharacterTalentWhereInput
  none: CharacterTalentWhereInput
  some: CharacterTalentWhereInput
}

input CharacterTalentScalarWhereInput {
  AND: [CharacterTalentScalarWhereInput!]
  id: StringFilter
  NOT: [CharacterTalentScalarWhereInput!]
  OR: [CharacterTalentScalarWhereInput!]
}

input CharacterTalentUpdateManyDataInput {
  id: ID
}

input CharacterTalentUpdateManyWithoutCharacterInput {
  connect: [CharacterTalentWhereUniqueInput!]
  create: [CharacterTalentCreateWithoutCharacterInput!]
  delete: [CharacterTalentWhereUniqueInput!]
  deleteMany: [CharacterTalentScalarWhereInput!]
  disconnect: [CharacterTalentWhereUniqueInput!]
  set: [CharacterTalentWhereUniqueInput!]
  update: [CharacterTalentUpdateWithWhereUniqueWithoutCharacterInput!]
  updateMany: [CharacterTalentUpdateManyWithWhereNestedInput!]
  upsert: [CharacterTalentUpsertWithWhereUniqueWithoutCharacterInput!]
}

input CharacterTalentUpdateManyWithoutTalentInput {
  connect: [CharacterTalentWhereUniqueInput!]
  create: [CharacterTalentCreateWithoutTalentInput!]
  delete: [CharacterTalentWhereUniqueInput!]
  deleteMany: [CharacterTalentScalarWhereInput!]
  disconnect: [CharacterTalentWhereUniqueInput!]
  set: [CharacterTalentWhereUniqueInput!]
  update: [CharacterTalentUpdateWithWhereUniqueWithoutTalentInput!]
  updateMany: [CharacterTalentUpdateManyWithWhereNestedInput!]
  upsert: [CharacterTalentUpsertWithWhereUniqueWithoutTalentInput!]
}

input CharacterTalentUpdateManyWithWhereNestedInput {
  data: CharacterTalentUpdateManyDataInput!
  where: CharacterTalentScalarWhereInput!
}

input CharacterTalentUpdateWithoutCharacterDataInput {
  id: ID
  talent: TalentTreeNodeUpdateOneRequiredWithoutCharacterTalentsInput
}

input CharacterTalentUpdateWithoutTalentDataInput {
  character: CharacterUpdateOneWithoutTalentsInput
  id: ID
}

input CharacterTalentUpdateWithWhereUniqueWithoutCharacterInput {
  data: CharacterTalentUpdateWithoutCharacterDataInput!
  where: CharacterTalentWhereUniqueInput!
}

input CharacterTalentUpdateWithWhereUniqueWithoutTalentInput {
  data: CharacterTalentUpdateWithoutTalentDataInput!
  where: CharacterTalentWhereUniqueInput!
}

input CharacterTalentUpsertWithWhereUniqueWithoutCharacterInput {
  create: CharacterTalentCreateWithoutCharacterInput!
  update: CharacterTalentUpdateWithoutCharacterDataInput!
  where: CharacterTalentWhereUniqueInput!
}

input CharacterTalentUpsertWithWhereUniqueWithoutTalentInput {
  create: CharacterTalentCreateWithoutTalentInput!
  update: CharacterTalentUpdateWithoutTalentDataInput!
  where: CharacterTalentWhereUniqueInput!
}

input CharacterTalentWhereInput {
  AND: [CharacterTalentWhereInput!]
  character: CharacterWhereInput
  id: StringFilter
  NOT: [CharacterTalentWhereInput!]
  OR: [CharacterTalentWhereInput!]
  talent: TalentTreeNodeWhereInput
}

input CharacterTalentWhereUniqueInput {
  id: ID
}

input CharacterUpdateInput {
  armor: ArmorUpdateManyWithoutCharacterInput
  background: String
  career: String
  characteristics: CharacteristicUpdateOneWithoutCharactersInput
  createdAt: DateTime
  credits: Int
  derivedAttributes: DerivedAttributeUpdateOneWithoutCharacterInput
  description: String
  duties: DutyUpdateManyWithoutCharacterInput
  encumberance: ThresholdUpdateOneWithoutCharactersInput
  experience: ExperienceUpdateOneWithoutCharactersInput
  gear: GearUpdateManyWithoutCharacterInput
  id: ID
  imageUrl: String
  injuries: String
  motivation: String
  name: String
  notes: String
  resources: String
  skills: CharacterSkillUpdateManyWithoutCharacterInput
  specializations: SpecializationUpdateManyWithoutCharactersInput
  species: String
  system: System
  talents: CharacterTalentUpdateManyWithoutCharacterInput
  updatedAt: DateTime
  user: UserUpdateOneRequiredWithoutCharactersInput
  weapons: WeaponUpdateManyWithoutCharacterInput
}

input CharacterUpdateManyDataInput {
  background: String
  career: String
  createdAt: DateTime
  credits: Int
  description: String
  id: ID
  imageUrl: String
  injuries: String
  motivation: String
  name: String
  notes: String
  resources: String
  species: String
  system: System
  updatedAt: DateTime
}

input CharacterUpdateManyWithoutEncumberanceInput {
  connect: [CharacterWhereUniqueInput!]
  create: [CharacterCreateWithoutEncumberanceInput!]
  delete: [CharacterWhereUniqueInput!]
  deleteMany: [CharacterScalarWhereInput!]
  disconnect: [CharacterWhereUniqueInput!]
  set: [CharacterWhereUniqueInput!]
  update: [CharacterUpdateWithWhereUniqueWithoutEncumberanceInput!]
  updateMany: [CharacterUpdateManyWithWhereNestedInput!]
  upsert: [CharacterUpsertWithWhereUniqueWithoutEncumberanceInput!]
}

input CharacterUpdateManyWithoutSpecializationsInput {
  connect: [CharacterWhereUniqueInput!]
  create: [CharacterCreateWithoutSpecializationsInput!]
  delete: [CharacterWhereUniqueInput!]
  deleteMany: [CharacterScalarWhereInput!]
  disconnect: [CharacterWhereUniqueInput!]
  set: [CharacterWhereUniqueInput!]
  update: [CharacterUpdateWithWhereUniqueWithoutSpecializationsInput!]
  updateMany: [CharacterUpdateManyWithWhereNestedInput!]
  upsert: [CharacterUpsertWithWhereUniqueWithoutSpecializationsInput!]
}

input CharacterUpdateManyWithWhereNestedInput {
  data: CharacterUpdateManyDataInput!
  where: CharacterScalarWhereInput!
}

input CharacterUpdateOneWithoutArmorInput {
  connect: CharacterWhereUniqueInput
  create: CharacterCreateWithoutArmorInput
  delete: Boolean
  disconnect: Boolean
  update: CharacterUpdateWithoutArmorDataInput
  upsert: CharacterUpsertWithoutArmorInput
}

input CharacterUpdateOneWithoutDerivedAttributesInput {
  connect: CharacterWhereUniqueInput
  create: CharacterCreateWithoutDerivedAttributesInput
  delete: Boolean
  disconnect: Boolean
  update: CharacterUpdateWithoutDerivedAttributesDataInput
  upsert: CharacterUpsertWithoutDerivedAttributesInput
}

input CharacterUpdateOneWithoutSkillsInput {
  connect: CharacterWhereUniqueInput
  create: CharacterCreateWithoutSkillsInput
  delete: Boolean
  disconnect: Boolean
  update: CharacterUpdateWithoutSkillsDataInput
  upsert: CharacterUpsertWithoutSkillsInput
}

input CharacterUpdateOneWithoutTalentsInput {
  connect: CharacterWhereUniqueInput
  create: CharacterCreateWithoutTalentsInput
  delete: Boolean
  disconnect: Boolean
  update: CharacterUpdateWithoutTalentsDataInput
  upsert: CharacterUpsertWithoutTalentsInput
}

input CharacterUpdateOneWithoutWeaponsInput {
  connect: CharacterWhereUniqueInput
  create: CharacterCreateWithoutWeaponsInput
  delete: Boolean
  disconnect: Boolean
  update: CharacterUpdateWithoutWeaponsDataInput
  upsert: CharacterUpsertWithoutWeaponsInput
}

input CharacterUpdateWithoutArmorDataInput {
  background: String
  career: String
  characteristics: CharacteristicUpdateOneWithoutCharactersInput
  createdAt: DateTime
  credits: Int
  derivedAttributes: DerivedAttributeUpdateOneWithoutCharacterInput
  description: String
  duties: DutyUpdateManyWithoutCharacterInput
  encumberance: ThresholdUpdateOneWithoutCharactersInput
  experience: ExperienceUpdateOneWithoutCharactersInput
  gear: GearUpdateManyWithoutCharacterInput
  id: ID
  imageUrl: String
  injuries: String
  motivation: String
  name: String
  notes: String
  resources: String
  skills: CharacterSkillUpdateManyWithoutCharacterInput
  specializations: SpecializationUpdateManyWithoutCharactersInput
  species: String
  system: System
  talents: CharacterTalentUpdateManyWithoutCharacterInput
  updatedAt: DateTime
  user: UserUpdateOneRequiredWithoutCharactersInput
  weapons: WeaponUpdateManyWithoutCharacterInput
}

input CharacterUpdateWithoutDerivedAttributesDataInput {
  armor: ArmorUpdateManyWithoutCharacterInput
  background: String
  career: String
  characteristics: CharacteristicUpdateOneWithoutCharactersInput
  createdAt: DateTime
  credits: Int
  description: String
  duties: DutyUpdateManyWithoutCharacterInput
  encumberance: ThresholdUpdateOneWithoutCharactersInput
  experience: ExperienceUpdateOneWithoutCharactersInput
  gear: GearUpdateManyWithoutCharacterInput
  id: ID
  imageUrl: String
  injuries: String
  motivation: String
  name: String
  notes: String
  resources: String
  skills: CharacterSkillUpdateManyWithoutCharacterInput
  specializations: SpecializationUpdateManyWithoutCharactersInput
  species: String
  system: System
  talents: CharacterTalentUpdateManyWithoutCharacterInput
  updatedAt: DateTime
  user: UserUpdateOneRequiredWithoutCharactersInput
  weapons: WeaponUpdateManyWithoutCharacterInput
}

input CharacterUpdateWithoutEncumberanceDataInput {
  armor: ArmorUpdateManyWithoutCharacterInput
  background: String
  career: String
  characteristics: CharacteristicUpdateOneWithoutCharactersInput
  createdAt: DateTime
  credits: Int
  derivedAttributes: DerivedAttributeUpdateOneWithoutCharacterInput
  description: String
  duties: DutyUpdateManyWithoutCharacterInput
  experience: ExperienceUpdateOneWithoutCharactersInput
  gear: GearUpdateManyWithoutCharacterInput
  id: ID
  imageUrl: String
  injuries: String
  motivation: String
  name: String
  notes: String
  resources: String
  skills: CharacterSkillUpdateManyWithoutCharacterInput
  specializations: SpecializationUpdateManyWithoutCharactersInput
  species: String
  system: System
  talents: CharacterTalentUpdateManyWithoutCharacterInput
  updatedAt: DateTime
  user: UserUpdateOneRequiredWithoutCharactersInput
  weapons: WeaponUpdateManyWithoutCharacterInput
}

input CharacterUpdateWithoutSkillsDataInput {
  armor: ArmorUpdateManyWithoutCharacterInput
  background: String
  career: String
  characteristics: CharacteristicUpdateOneWithoutCharactersInput
  createdAt: DateTime
  credits: Int
  derivedAttributes: DerivedAttributeUpdateOneWithoutCharacterInput
  description: String
  duties: DutyUpdateManyWithoutCharacterInput
  encumberance: ThresholdUpdateOneWithoutCharactersInput
  experience: ExperienceUpdateOneWithoutCharactersInput
  gear: GearUpdateManyWithoutCharacterInput
  id: ID
  imageUrl: String
  injuries: String
  motivation: String
  name: String
  notes: String
  resources: String
  specializations: SpecializationUpdateManyWithoutCharactersInput
  species: String
  system: System
  talents: CharacterTalentUpdateManyWithoutCharacterInput
  updatedAt: DateTime
  user: UserUpdateOneRequiredWithoutCharactersInput
  weapons: WeaponUpdateManyWithoutCharacterInput
}

input CharacterUpdateWithoutSpecializationsDataInput {
  armor: ArmorUpdateManyWithoutCharacterInput
  background: String
  career: String
  characteristics: CharacteristicUpdateOneWithoutCharactersInput
  createdAt: DateTime
  credits: Int
  derivedAttributes: DerivedAttributeUpdateOneWithoutCharacterInput
  description: String
  duties: DutyUpdateManyWithoutCharacterInput
  encumberance: ThresholdUpdateOneWithoutCharactersInput
  experience: ExperienceUpdateOneWithoutCharactersInput
  gear: GearUpdateManyWithoutCharacterInput
  id: ID
  imageUrl: String
  injuries: String
  motivation: String
  name: String
  notes: String
  resources: String
  skills: CharacterSkillUpdateManyWithoutCharacterInput
  species: String
  system: System
  talents: CharacterTalentUpdateManyWithoutCharacterInput
  updatedAt: DateTime
  user: UserUpdateOneRequiredWithoutCharactersInput
  weapons: WeaponUpdateManyWithoutCharacterInput
}

input CharacterUpdateWithoutTalentsDataInput {
  armor: ArmorUpdateManyWithoutCharacterInput
  background: String
  career: String
  characteristics: CharacteristicUpdateOneWithoutCharactersInput
  createdAt: DateTime
  credits: Int
  derivedAttributes: DerivedAttributeUpdateOneWithoutCharacterInput
  description: String
  duties: DutyUpdateManyWithoutCharacterInput
  encumberance: ThresholdUpdateOneWithoutCharactersInput
  experience: ExperienceUpdateOneWithoutCharactersInput
  gear: GearUpdateManyWithoutCharacterInput
  id: ID
  imageUrl: String
  injuries: String
  motivation: String
  name: String
  notes: String
  resources: String
  skills: CharacterSkillUpdateManyWithoutCharacterInput
  specializations: SpecializationUpdateManyWithoutCharactersInput
  species: String
  system: System
  updatedAt: DateTime
  user: UserUpdateOneRequiredWithoutCharactersInput
  weapons: WeaponUpdateManyWithoutCharacterInput
}

input CharacterUpdateWithoutWeaponsDataInput {
  armor: ArmorUpdateManyWithoutCharacterInput
  background: String
  career: String
  characteristics: CharacteristicUpdateOneWithoutCharactersInput
  createdAt: DateTime
  credits: Int
  derivedAttributes: DerivedAttributeUpdateOneWithoutCharacterInput
  description: String
  duties: DutyUpdateManyWithoutCharacterInput
  encumberance: ThresholdUpdateOneWithoutCharactersInput
  experience: ExperienceUpdateOneWithoutCharactersInput
  gear: GearUpdateManyWithoutCharacterInput
  id: ID
  imageUrl: String
  injuries: String
  motivation: String
  name: String
  notes: String
  resources: String
  skills: CharacterSkillUpdateManyWithoutCharacterInput
  specializations: SpecializationUpdateManyWithoutCharactersInput
  species: String
  system: System
  talents: CharacterTalentUpdateManyWithoutCharacterInput
  updatedAt: DateTime
  user: UserUpdateOneRequiredWithoutCharactersInput
}

input CharacterUpdateWithWhereUniqueWithoutEncumberanceInput {
  data: CharacterUpdateWithoutEncumberanceDataInput!
  where: CharacterWhereUniqueInput!
}

input CharacterUpdateWithWhereUniqueWithoutSpecializationsInput {
  data: CharacterUpdateWithoutSpecializationsDataInput!
  where: CharacterWhereUniqueInput!
}

input CharacterUpsertWithoutArmorInput {
  create: CharacterCreateWithoutArmorInput!
  update: CharacterUpdateWithoutArmorDataInput!
}

input CharacterUpsertWithoutDerivedAttributesInput {
  create: CharacterCreateWithoutDerivedAttributesInput!
  update: CharacterUpdateWithoutDerivedAttributesDataInput!
}

input CharacterUpsertWithoutSkillsInput {
  create: CharacterCreateWithoutSkillsInput!
  update: CharacterUpdateWithoutSkillsDataInput!
}

input CharacterUpsertWithoutTalentsInput {
  create: CharacterCreateWithoutTalentsInput!
  update: CharacterUpdateWithoutTalentsDataInput!
}

input CharacterUpsertWithoutWeaponsInput {
  create: CharacterCreateWithoutWeaponsInput!
  update: CharacterUpdateWithoutWeaponsDataInput!
}

input CharacterUpsertWithWhereUniqueWithoutEncumberanceInput {
  create: CharacterCreateWithoutEncumberanceInput!
  update: CharacterUpdateWithoutEncumberanceDataInput!
  where: CharacterWhereUniqueInput!
}

input CharacterUpsertWithWhereUniqueWithoutSpecializationsInput {
  create: CharacterCreateWithoutSpecializationsInput!
  update: CharacterUpdateWithoutSpecializationsDataInput!
  where: CharacterWhereUniqueInput!
}

input CharacterWhereInput {
  AND: [CharacterWhereInput!]
  armor: ArmorFilter
  background: NullableStringFilter
  career: StringFilter
  characteristics: CharacteristicWhereInput
  createdAt: DateTimeFilter
  credits: NullableIntFilter
  derivedAttributes: DerivedAttributeWhereInput
  description: NullableStringFilter
  duties: DutyFilter
  encumberance: ThresholdWhereInput
  experience: ExperienceWhereInput
  gear: GearFilter
  id: StringFilter
  imageUrl: NullableStringFilter
  injuries: NullableStringFilter
  motivation: NullableStringFilter
  name: StringFilter
  NOT: [CharacterWhereInput!]
  notes: NullableStringFilter
  OR: [CharacterWhereInput!]
  resources: NullableStringFilter
  skills: CharacterSkillFilter
  specializations: SpecializationFilter
  species: StringFilter
  system: System
  talents: CharacterTalentFilter
  updatedAt: DateTimeFilter
  user: UserWhereInput
  weapons: WeaponFilter
}

input CharacterWhereUniqueInput {
  id: ID
}

scalar DateTime

input DateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: DateTime
  notIn: [DateTime!]
}

type DefenseAttribute {
  id: ID!
  melee: Int!
  ranged: Int!
}

input DefenseAttributeCreateOneWithoutDefenseInput {
  connect: DefenseAttributeWhereUniqueInput
  create: DefenseAttributeCreateWithoutDerivedAttributeInput
}

input DefenseAttributeCreateWithoutArmorsInput {
  derivedAttribute: DerivedAttributeCreateOneWithoutDerivedAttributeInput
  id: ID
  melee: Int
  ranged: Int
}

input DefenseAttributeCreateWithoutDerivedAttributeInput {
  armors: ArmorCreateManyWithoutArmorsInput
  id: ID
  melee: Int
  ranged: Int
}

input DefenseAttributeUpdateOneRequiredWithoutDerivedAttributeInput {
  connect: DefenseAttributeWhereUniqueInput
  create: DefenseAttributeCreateWithoutDerivedAttributeInput
  update: DefenseAttributeUpdateWithoutDerivedAttributeDataInput
  upsert: DefenseAttributeUpsertWithoutDerivedAttributeInput
}

input DefenseAttributeUpdateOneWithoutArmorsInput {
  connect: DefenseAttributeWhereUniqueInput
  create: DefenseAttributeCreateWithoutArmorsInput
  delete: Boolean
  disconnect: Boolean
  update: DefenseAttributeUpdateWithoutArmorsDataInput
  upsert: DefenseAttributeUpsertWithoutArmorsInput
}

input DefenseAttributeUpdateWithoutArmorsDataInput {
  derivedAttribute: DerivedAttributeUpdateOneWithoutDefenseInput
  id: ID
  melee: Int
  ranged: Int
}

input DefenseAttributeUpdateWithoutDerivedAttributeDataInput {
  armors: ArmorUpdateManyWithoutDefenseInput
  id: ID
  melee: Int
  ranged: Int
}

input DefenseAttributeUpsertWithoutArmorsInput {
  create: DefenseAttributeCreateWithoutArmorsInput!
  update: DefenseAttributeUpdateWithoutArmorsDataInput!
}

input DefenseAttributeUpsertWithoutDerivedAttributeInput {
  create: DefenseAttributeCreateWithoutDerivedAttributeInput!
  update: DefenseAttributeUpdateWithoutDerivedAttributeDataInput!
}

input DefenseAttributeWhereInput {
  AND: [DefenseAttributeWhereInput!]
  armors: ArmorFilter
  derivedAttribute: DerivedAttributeWhereInput
  id: StringFilter
  melee: IntFilter
  NOT: [DefenseAttributeWhereInput!]
  OR: [DefenseAttributeWhereInput!]
  ranged: IntFilter
}

input DefenseAttributeWhereUniqueInput {
  id: ID
}

type DerivedAttribute {
  defense: DefenseAttribute!
  id: ID!
  soak: Int!
  strain: Threshold!
  wounds: Threshold!
}

input DerivedAttributeCreateOneWithoutDerivedAttributeInput {
  connect: DerivedAttributeWhereUniqueInput
  create: DerivedAttributeCreateWithoutDefenseInput
}

input DerivedAttributeCreateOneWithoutDerivedAttributesInput {
  connect: DerivedAttributeWhereUniqueInput
  create: DerivedAttributeCreateWithoutCharacterInput
}

input DerivedAttributeCreateOneWithoutStrainThresholdInput {
  connect: DerivedAttributeWhereUniqueInput
  create: DerivedAttributeCreateWithoutStrainInput
}

input DerivedAttributeCreateOneWithoutWoundsThresholdInput {
  connect: DerivedAttributeWhereUniqueInput
  create: DerivedAttributeCreateWithoutWoundsInput
}

input DerivedAttributeCreateWithoutCharacterInput {
  defense: DefenseAttributeCreateOneWithoutDefenseInput!
  id: ID
  soak: Int!
  strain: ThresholdCreateOneWithoutStrainInput!
  wounds: ThresholdCreateOneWithoutWoundsInput!
}

input DerivedAttributeCreateWithoutDefenseInput {
  character: CharacterCreateOneWithoutCharacterInput
  id: ID
  soak: Int!
  strain: ThresholdCreateOneWithoutStrainInput!
  wounds: ThresholdCreateOneWithoutWoundsInput!
}

input DerivedAttributeCreateWithoutStrainInput {
  character: CharacterCreateOneWithoutCharacterInput
  defense: DefenseAttributeCreateOneWithoutDefenseInput!
  id: ID
  soak: Int!
  wounds: ThresholdCreateOneWithoutWoundsInput!
}

input DerivedAttributeCreateWithoutWoundsInput {
  character: CharacterCreateOneWithoutCharacterInput
  defense: DefenseAttributeCreateOneWithoutDefenseInput!
  id: ID
  soak: Int!
  strain: ThresholdCreateOneWithoutStrainInput!
}

input DerivedAttributeUpdateOneWithoutCharacterInput {
  connect: DerivedAttributeWhereUniqueInput
  create: DerivedAttributeCreateWithoutCharacterInput
  delete: Boolean
  disconnect: Boolean
  update: DerivedAttributeUpdateWithoutCharacterDataInput
  upsert: DerivedAttributeUpsertWithoutCharacterInput
}

input DerivedAttributeUpdateOneWithoutDefenseInput {
  connect: DerivedAttributeWhereUniqueInput
  create: DerivedAttributeCreateWithoutDefenseInput
  delete: Boolean
  disconnect: Boolean
  update: DerivedAttributeUpdateWithoutDefenseDataInput
  upsert: DerivedAttributeUpsertWithoutDefenseInput
}

input DerivedAttributeUpdateOneWithoutStrainInput {
  connect: DerivedAttributeWhereUniqueInput
  create: DerivedAttributeCreateWithoutStrainInput
  delete: Boolean
  disconnect: Boolean
  update: DerivedAttributeUpdateWithoutStrainDataInput
  upsert: DerivedAttributeUpsertWithoutStrainInput
}

input DerivedAttributeUpdateOneWithoutWoundsInput {
  connect: DerivedAttributeWhereUniqueInput
  create: DerivedAttributeCreateWithoutWoundsInput
  delete: Boolean
  disconnect: Boolean
  update: DerivedAttributeUpdateWithoutWoundsDataInput
  upsert: DerivedAttributeUpsertWithoutWoundsInput
}

input DerivedAttributeUpdateWithoutCharacterDataInput {
  defense: DefenseAttributeUpdateOneRequiredWithoutDerivedAttributeInput
  id: ID
  soak: Int
  strain: ThresholdUpdateOneRequiredWithoutStrainThresholdInput
  wounds: ThresholdUpdateOneRequiredWithoutWoundsThresholdInput
}

input DerivedAttributeUpdateWithoutDefenseDataInput {
  character: CharacterUpdateOneWithoutDerivedAttributesInput
  id: ID
  soak: Int
  strain: ThresholdUpdateOneRequiredWithoutStrainThresholdInput
  wounds: ThresholdUpdateOneRequiredWithoutWoundsThresholdInput
}

input DerivedAttributeUpdateWithoutStrainDataInput {
  character: CharacterUpdateOneWithoutDerivedAttributesInput
  defense: DefenseAttributeUpdateOneRequiredWithoutDerivedAttributeInput
  id: ID
  soak: Int
  wounds: ThresholdUpdateOneRequiredWithoutWoundsThresholdInput
}

input DerivedAttributeUpdateWithoutWoundsDataInput {
  character: CharacterUpdateOneWithoutDerivedAttributesInput
  defense: DefenseAttributeUpdateOneRequiredWithoutDerivedAttributeInput
  id: ID
  soak: Int
  strain: ThresholdUpdateOneRequiredWithoutStrainThresholdInput
}

input DerivedAttributeUpsertWithoutCharacterInput {
  create: DerivedAttributeCreateWithoutCharacterInput!
  update: DerivedAttributeUpdateWithoutCharacterDataInput!
}

input DerivedAttributeUpsertWithoutDefenseInput {
  create: DerivedAttributeCreateWithoutDefenseInput!
  update: DerivedAttributeUpdateWithoutDefenseDataInput!
}

input DerivedAttributeUpsertWithoutStrainInput {
  create: DerivedAttributeCreateWithoutStrainInput!
  update: DerivedAttributeUpdateWithoutStrainDataInput!
}

input DerivedAttributeUpsertWithoutWoundsInput {
  create: DerivedAttributeCreateWithoutWoundsInput!
  update: DerivedAttributeUpdateWithoutWoundsDataInput!
}

input DerivedAttributeWhereInput {
  AND: [DerivedAttributeWhereInput!]
  character: CharacterWhereInput
  defense: DefenseAttributeWhereInput
  id: StringFilter
  NOT: [DerivedAttributeWhereInput!]
  OR: [DerivedAttributeWhereInput!]
  soak: IntFilter
  strain: ThresholdWhereInput
  wounds: ThresholdWhereInput
}

input DerivedAttributeWhereUniqueInput {
  id: ID
}

type Duty {
  current: Int!
  description: String!
  id: ID!
  type: String!
}

input DutyCreateManyWithoutDutiesInput {
  connect: [DutyWhereUniqueInput!]
  create: [DutyCreateWithoutCharacterInput!]
}

input DutyCreateWithoutCharacterInput {
  current: Int
  description: String!
  id: ID
  type: String!
}

input DutyFilter {
  every: DutyWhereInput
  none: DutyWhereInput
  some: DutyWhereInput
}

input DutyScalarWhereInput {
  AND: [DutyScalarWhereInput!]
  current: IntFilter
  description: StringFilter
  id: StringFilter
  NOT: [DutyScalarWhereInput!]
  OR: [DutyScalarWhereInput!]
  type: StringFilter
}

input DutyUpdateManyDataInput {
  current: Int
  description: String
  id: ID
  type: String
}

input DutyUpdateManyWithoutCharacterInput {
  connect: [DutyWhereUniqueInput!]
  create: [DutyCreateWithoutCharacterInput!]
  delete: [DutyWhereUniqueInput!]
  deleteMany: [DutyScalarWhereInput!]
  disconnect: [DutyWhereUniqueInput!]
  set: [DutyWhereUniqueInput!]
  update: [DutyUpdateWithWhereUniqueWithoutCharacterInput!]
  updateMany: [DutyUpdateManyWithWhereNestedInput!]
  upsert: [DutyUpsertWithWhereUniqueWithoutCharacterInput!]
}

input DutyUpdateManyWithWhereNestedInput {
  data: DutyUpdateManyDataInput!
  where: DutyScalarWhereInput!
}

input DutyUpdateWithoutCharacterDataInput {
  current: Int
  description: String
  id: ID
  type: String
}

input DutyUpdateWithWhereUniqueWithoutCharacterInput {
  data: DutyUpdateWithoutCharacterDataInput!
  where: DutyWhereUniqueInput!
}

input DutyUpsertWithWhereUniqueWithoutCharacterInput {
  create: DutyCreateWithoutCharacterInput!
  update: DutyUpdateWithoutCharacterDataInput!
  where: DutyWhereUniqueInput!
}

input DutyWhereInput {
  AND: [DutyWhereInput!]
  character: CharacterWhereInput
  current: IntFilter
  description: StringFilter
  id: StringFilter
  NOT: [DutyWhereInput!]
  OR: [DutyWhereInput!]
  type: StringFilter
}

input DutyWhereUniqueInput {
  id: ID
}

type Experience {
  available: Int!
  id: ID!
  total: Int!
}

input ExperienceCreateOneWithoutExperienceInput {
  connect: ExperienceWhereUniqueInput
  create: ExperienceCreateWithoutCharactersInput
}

input ExperienceCreateWithoutCharactersInput {
  available: Int!
  id: ID
  total: Int!
}

input ExperienceUpdateOneWithoutCharactersInput {
  connect: ExperienceWhereUniqueInput
  create: ExperienceCreateWithoutCharactersInput
  delete: Boolean
  disconnect: Boolean
  update: ExperienceUpdateWithoutCharactersDataInput
  upsert: ExperienceUpsertWithoutCharactersInput
}

input ExperienceUpdateWithoutCharactersDataInput {
  available: Int
  id: ID
  total: Int
}

input ExperienceUpsertWithoutCharactersInput {
  create: ExperienceCreateWithoutCharactersInput!
  update: ExperienceUpdateWithoutCharactersDataInput!
}

input ExperienceWhereInput {
  AND: [ExperienceWhereInput!]
  available: IntFilter
  characters: CharacterFilter
  id: StringFilter
  NOT: [ExperienceWhereInput!]
  OR: [ExperienceWhereInput!]
  total: IntFilter
}

input ExperienceWhereUniqueInput {
  id: ID
}

type Gear {
  description: String
  encumberance: Int!
  id: ID!
  name: String!
  quantity: Int!
  rarity: Int!
}

enum GearCondition {
  MAJOR
  MINOR
  MODERATE
  NONE
}

input GearCreateManyWithoutGearInput {
  connect: [GearWhereUniqueInput!]
  create: [GearCreateWithoutCharacterInput!]
}

input GearCreateWithoutCharacterInput {
  description: String
  encumberance: Int
  id: ID
  name: String!
  quantity: Int
  rarity: Int
}

input GearFilter {
  every: GearWhereInput
  none: GearWhereInput
  some: GearWhereInput
}

input GearScalarWhereInput {
  AND: [GearScalarWhereInput!]
  description: NullableStringFilter
  encumberance: IntFilter
  id: StringFilter
  name: StringFilter
  NOT: [GearScalarWhereInput!]
  OR: [GearScalarWhereInput!]
  quantity: IntFilter
  rarity: IntFilter
}

input GearUpdateManyDataInput {
  description: String
  encumberance: Int
  id: ID
  name: String
  quantity: Int
  rarity: Int
}

input GearUpdateManyWithoutCharacterInput {
  connect: [GearWhereUniqueInput!]
  create: [GearCreateWithoutCharacterInput!]
  delete: [GearWhereUniqueInput!]
  deleteMany: [GearScalarWhereInput!]
  disconnect: [GearWhereUniqueInput!]
  set: [GearWhereUniqueInput!]
  update: [GearUpdateWithWhereUniqueWithoutCharacterInput!]
  updateMany: [GearUpdateManyWithWhereNestedInput!]
  upsert: [GearUpsertWithWhereUniqueWithoutCharacterInput!]
}

input GearUpdateManyWithWhereNestedInput {
  data: GearUpdateManyDataInput!
  where: GearScalarWhereInput!
}

input GearUpdateWithoutCharacterDataInput {
  description: String
  encumberance: Int
  id: ID
  name: String
  quantity: Int
  rarity: Int
}

input GearUpdateWithWhereUniqueWithoutCharacterInput {
  data: GearUpdateWithoutCharacterDataInput!
  where: GearWhereUniqueInput!
}

input GearUpsertWithWhereUniqueWithoutCharacterInput {
  create: GearCreateWithoutCharacterInput!
  update: GearUpdateWithoutCharacterDataInput!
  where: GearWhereUniqueInput!
}

input GearWhereInput {
  AND: [GearWhereInput!]
  character: CharacterWhereInput
  description: NullableStringFilter
  encumberance: IntFilter
  id: StringFilter
  name: StringFilter
  NOT: [GearWhereInput!]
  OR: [GearWhereInput!]
  quantity: IntFilter
  rarity: IntFilter
}

input GearWhereUniqueInput {
  id: ID
}

input IntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: Int
  notIn: [Int!]
}

type Mutation {
  createOneCharacter(data: CharacterCreateInput!): Character!
  deleteOneCharacter(where: CharacterWhereUniqueInput!): Character
  login(email: String!, password: String!): AuthPayload!
  signup(email: String!, name: String, password: String!): AuthPayload!
  updateOneCharacter(data: CharacterUpdateInput!, where: CharacterWhereUniqueInput!): Character
}

input NullableIntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: Int
  notIn: [Int!]
}

input NullableStringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: String
  notIn: [String!]
  startsWith: String
}

enum OrderByArg {
  asc
  desc
}

type Query {
  career(where: CareerWhereUniqueInput!): Career
  careers(after: Int, before: Int, first: Int, last: Int, skip: Int): [Career!]!
  character(where: CharacterWhereUniqueInput!): Character
  characters(after: ID, before: ID, first: Int, last: Int, skip: Int): [Character!]!
  me: User
  skill(where: SkillWhereUniqueInput!): Skill
  skills(after: Int, before: Int, first: Int, last: Int, skip: Int, where: QuerySkillsWhereInput): [Skill!]!
  talent(where: TalentWhereUniqueInput!): Talent
  talents(after: Int, before: Int, first: Int, last: Int, skip: Int, where: QueryTalentsWhereInput): [Talent!]!
  user(where: UserWhereUniqueInput!): User
}

input QuerySkillsWhereInput {
  type: SkillType
}

input QueryTalentsWhereInput {
  name: StringFilter
}

enum Range {
  Engaged
  Extreme
  Long
  Medium
  Short
}

type Skill {
  careers(after: Int, before: Int, first: Int, last: Int, orderBy: SkillCareersOrderByInput, skip: Int): [Career!]!
  characteristic: CharacteristicName!
  id: Int!
  name: String!
  type: SkillType!
}

input SkillCareersOrderByInput {
  id: OrderByArg
  name: OrderByArg
}

input SkillCreateManyWithoutSkillsInput {
  connect: [SkillWhereUniqueInput!]
  create: [SkillCreateWithoutCareersInput!]
}

input SkillCreateOneWithoutSkillInput {
  connect: SkillWhereUniqueInput
  create: SkillCreateWithoutCharacterSkillsInput
}

input SkillCreateWithoutCareersInput {
  characteristic: CharacteristicName!
  characterSkills: CharacterSkillCreateManyWithoutCharacterSkillsInput
  id: Int!
  name: String!
  specializations: SpecializationCreateManyWithoutSpecializationsInput
  type: SkillType!
}

input SkillCreateWithoutCharacterSkillsInput {
  careers: CareerCreateManyWithoutCareersInput
  characteristic: CharacteristicName!
  id: Int!
  name: String!
  specializations: SpecializationCreateManyWithoutSpecializationsInput
  type: SkillType!
}

input SkillCreateWithoutSpecializationsInput {
  careers: CareerCreateManyWithoutCareersInput
  characteristic: CharacteristicName!
  characterSkills: CharacterSkillCreateManyWithoutCharacterSkillsInput
  id: Int!
  name: String!
  type: SkillType!
}

input SkillFilter {
  every: SkillWhereInput
  none: SkillWhereInput
  some: SkillWhereInput
}

input SkillScalarWhereInput {
  AND: [SkillScalarWhereInput!]
  careers: CareerFilter
  characteristic: CharacteristicName
  characterSkills: CharacterSkillFilter
  id: IntFilter
  name: StringFilter
  NOT: [SkillScalarWhereInput!]
  OR: [SkillScalarWhereInput!]
  specializations: SpecializationFilter
  type: SkillType
}

enum SkillType {
  Combat
  General
  Knowledge
}

input SkillUpdateManyDataInput {
  characteristic: CharacteristicName
  id: Int
  name: String
  type: SkillType
}

input SkillUpdateManyWithoutCareersInput {
  connect: [SkillWhereUniqueInput!]
  create: [SkillCreateWithoutCareersInput!]
  delete: [SkillWhereUniqueInput!]
  deleteMany: [SkillScalarWhereInput!]
  disconnect: [SkillWhereUniqueInput!]
  set: [SkillWhereUniqueInput!]
  update: [SkillUpdateWithWhereUniqueWithoutCareersInput!]
  updateMany: [SkillUpdateManyWithWhereNestedInput!]
  upsert: [SkillUpsertWithWhereUniqueWithoutCareersInput!]
}

input SkillUpdateManyWithoutSpecializationsInput {
  connect: [SkillWhereUniqueInput!]
  create: [SkillCreateWithoutSpecializationsInput!]
  delete: [SkillWhereUniqueInput!]
  deleteMany: [SkillScalarWhereInput!]
  disconnect: [SkillWhereUniqueInput!]
  set: [SkillWhereUniqueInput!]
  update: [SkillUpdateWithWhereUniqueWithoutSpecializationsInput!]
  updateMany: [SkillUpdateManyWithWhereNestedInput!]
  upsert: [SkillUpsertWithWhereUniqueWithoutSpecializationsInput!]
}

input SkillUpdateManyWithWhereNestedInput {
  data: SkillUpdateManyDataInput!
  where: SkillScalarWhereInput!
}

input SkillUpdateOneRequiredWithoutCharacterSkillsInput {
  connect: SkillWhereUniqueInput
  create: SkillCreateWithoutCharacterSkillsInput
  update: SkillUpdateWithoutCharacterSkillsDataInput
  upsert: SkillUpsertWithoutCharacterSkillsInput
}

input SkillUpdateWithoutCareersDataInput {
  characteristic: CharacteristicName
  characterSkills: CharacterSkillUpdateManyWithoutSkillInput
  id: Int
  name: String
  specializations: SpecializationUpdateManyWithoutSkillsInput
  type: SkillType
}

input SkillUpdateWithoutCharacterSkillsDataInput {
  careers: CareerUpdateManyWithoutSkillsInput
  characteristic: CharacteristicName
  id: Int
  name: String
  specializations: SpecializationUpdateManyWithoutSkillsInput
  type: SkillType
}

input SkillUpdateWithoutSpecializationsDataInput {
  careers: CareerUpdateManyWithoutSkillsInput
  characteristic: CharacteristicName
  characterSkills: CharacterSkillUpdateManyWithoutSkillInput
  id: Int
  name: String
  type: SkillType
}

input SkillUpdateWithWhereUniqueWithoutCareersInput {
  data: SkillUpdateWithoutCareersDataInput!
  where: SkillWhereUniqueInput!
}

input SkillUpdateWithWhereUniqueWithoutSpecializationsInput {
  data: SkillUpdateWithoutSpecializationsDataInput!
  where: SkillWhereUniqueInput!
}

input SkillUpsertWithoutCharacterSkillsInput {
  create: SkillCreateWithoutCharacterSkillsInput!
  update: SkillUpdateWithoutCharacterSkillsDataInput!
}

input SkillUpsertWithWhereUniqueWithoutCareersInput {
  create: SkillCreateWithoutCareersInput!
  update: SkillUpdateWithoutCareersDataInput!
  where: SkillWhereUniqueInput!
}

input SkillUpsertWithWhereUniqueWithoutSpecializationsInput {
  create: SkillCreateWithoutSpecializationsInput!
  update: SkillUpdateWithoutSpecializationsDataInput!
  where: SkillWhereUniqueInput!
}

input SkillWhereInput {
  AND: [SkillWhereInput!]
  careers: CareerFilter
  characteristic: CharacteristicName
  characterSkills: CharacterSkillFilter
  id: IntFilter
  name: StringFilter
  NOT: [SkillWhereInput!]
  OR: [SkillWhereInput!]
  specializations: SpecializationFilter
  type: SkillType
}

input SkillWhereUniqueInput {
  id: Int
  name: String
}

type Specialization {
  career: Career
  id: Int!
  name: String!
  skills(after: Int, before: Int, first: Int, last: Int, skip: Int): [Skill!]!
  talents(after: Int, before: Int, first: Int, last: Int, skip: Int): [Talent!]!
  talentTree(after: String, before: String, first: Int, last: Int, orderBy: SpecializationTalentTreeOrderByInput, skip: Int): [TalentTreeNode!]!
}

input SpecializationCreateManyWithoutSpecializationsInput {
  connect: [SpecializationWhereUniqueInput!]
  create: [SpecializationCreateWithoutSkillsInput!]
}

input SpecializationCreateOneWithoutSpecializationInput {
  connect: SpecializationWhereUniqueInput
  create: SpecializationCreateWithoutTalentTreeInput
}

input SpecializationCreateWithoutCareerInput {
  characters: CharacterCreateManyWithoutCharactersInput
  id: Int!
  name: String!
  skills: SkillCreateManyWithoutSkillsInput
  talents: TalentCreateManyWithoutTalentsInput
  talentTree: TalentTreeNodeCreateManyWithoutTalentTreeInput
}

input SpecializationCreateWithoutCharactersInput {
  career: CareerCreateOneWithoutCareerInput
  id: Int!
  name: String!
  skills: SkillCreateManyWithoutSkillsInput
  talents: TalentCreateManyWithoutTalentsInput
  talentTree: TalentTreeNodeCreateManyWithoutTalentTreeInput
}

input SpecializationCreateWithoutSkillsInput {
  career: CareerCreateOneWithoutCareerInput
  characters: CharacterCreateManyWithoutCharactersInput
  id: Int!
  name: String!
  talents: TalentCreateManyWithoutTalentsInput
  talentTree: TalentTreeNodeCreateManyWithoutTalentTreeInput
}

input SpecializationCreateWithoutTalentsInput {
  career: CareerCreateOneWithoutCareerInput
  characters: CharacterCreateManyWithoutCharactersInput
  id: Int!
  name: String!
  skills: SkillCreateManyWithoutSkillsInput
  talentTree: TalentTreeNodeCreateManyWithoutTalentTreeInput
}

input SpecializationCreateWithoutTalentTreeInput {
  career: CareerCreateOneWithoutCareerInput
  characters: CharacterCreateManyWithoutCharactersInput
  id: Int!
  name: String!
  skills: SkillCreateManyWithoutSkillsInput
  talents: TalentCreateManyWithoutTalentsInput
}

input SpecializationFilter {
  every: SpecializationWhereInput
  none: SpecializationWhereInput
  some: SpecializationWhereInput
}

input SpecializationScalarWhereInput {
  AND: [SpecializationScalarWhereInput!]
  characters: CharacterFilter
  id: IntFilter
  name: StringFilter
  NOT: [SpecializationScalarWhereInput!]
  OR: [SpecializationScalarWhereInput!]
  skills: SkillFilter
  talents: TalentFilter
  talentTree: TalentTreeNodeFilter
}

input SpecializationTalentTreeOrderByInput {
  row: OrderByArg
}

input SpecializationUpdateManyDataInput {
  id: Int
  name: String
}

input SpecializationUpdateManyWithoutCareerInput {
  connect: [SpecializationWhereUniqueInput!]
  create: [SpecializationCreateWithoutCareerInput!]
  delete: [SpecializationWhereUniqueInput!]
  deleteMany: [SpecializationScalarWhereInput!]
  disconnect: [SpecializationWhereUniqueInput!]
  set: [SpecializationWhereUniqueInput!]
  update: [SpecializationUpdateWithWhereUniqueWithoutCareerInput!]
  updateMany: [SpecializationUpdateManyWithWhereNestedInput!]
  upsert: [SpecializationUpsertWithWhereUniqueWithoutCareerInput!]
}

input SpecializationUpdateManyWithoutCharactersInput {
  connect: [SpecializationWhereUniqueInput!]
  create: [SpecializationCreateWithoutCharactersInput!]
  delete: [SpecializationWhereUniqueInput!]
  deleteMany: [SpecializationScalarWhereInput!]
  disconnect: [SpecializationWhereUniqueInput!]
  set: [SpecializationWhereUniqueInput!]
  update: [SpecializationUpdateWithWhereUniqueWithoutCharactersInput!]
  updateMany: [SpecializationUpdateManyWithWhereNestedInput!]
  upsert: [SpecializationUpsertWithWhereUniqueWithoutCharactersInput!]
}

input SpecializationUpdateManyWithoutSkillsInput {
  connect: [SpecializationWhereUniqueInput!]
  create: [SpecializationCreateWithoutSkillsInput!]
  delete: [SpecializationWhereUniqueInput!]
  deleteMany: [SpecializationScalarWhereInput!]
  disconnect: [SpecializationWhereUniqueInput!]
  set: [SpecializationWhereUniqueInput!]
  update: [SpecializationUpdateWithWhereUniqueWithoutSkillsInput!]
  updateMany: [SpecializationUpdateManyWithWhereNestedInput!]
  upsert: [SpecializationUpsertWithWhereUniqueWithoutSkillsInput!]
}

input SpecializationUpdateManyWithoutTalentsInput {
  connect: [SpecializationWhereUniqueInput!]
  create: [SpecializationCreateWithoutTalentsInput!]
  delete: [SpecializationWhereUniqueInput!]
  deleteMany: [SpecializationScalarWhereInput!]
  disconnect: [SpecializationWhereUniqueInput!]
  set: [SpecializationWhereUniqueInput!]
  update: [SpecializationUpdateWithWhereUniqueWithoutTalentsInput!]
  updateMany: [SpecializationUpdateManyWithWhereNestedInput!]
  upsert: [SpecializationUpsertWithWhereUniqueWithoutTalentsInput!]
}

input SpecializationUpdateManyWithWhereNestedInput {
  data: SpecializationUpdateManyDataInput!
  where: SpecializationScalarWhereInput!
}

input SpecializationUpdateOneRequiredWithoutTalentTreeInput {
  connect: SpecializationWhereUniqueInput
  create: SpecializationCreateWithoutTalentTreeInput
  update: SpecializationUpdateWithoutTalentTreeDataInput
  upsert: SpecializationUpsertWithoutTalentTreeInput
}

input SpecializationUpdateWithoutCareerDataInput {
  characters: CharacterUpdateManyWithoutSpecializationsInput
  id: Int
  name: String
  skills: SkillUpdateManyWithoutSpecializationsInput
  talents: TalentUpdateManyWithoutSpecializationsInput
  talentTree: TalentTreeNodeUpdateManyWithoutSpecializationInput
}

input SpecializationUpdateWithoutCharactersDataInput {
  career: CareerUpdateOneWithoutSpecializationsInput
  id: Int
  name: String
  skills: SkillUpdateManyWithoutSpecializationsInput
  talents: TalentUpdateManyWithoutSpecializationsInput
  talentTree: TalentTreeNodeUpdateManyWithoutSpecializationInput
}

input SpecializationUpdateWithoutSkillsDataInput {
  career: CareerUpdateOneWithoutSpecializationsInput
  characters: CharacterUpdateManyWithoutSpecializationsInput
  id: Int
  name: String
  talents: TalentUpdateManyWithoutSpecializationsInput
  talentTree: TalentTreeNodeUpdateManyWithoutSpecializationInput
}

input SpecializationUpdateWithoutTalentsDataInput {
  career: CareerUpdateOneWithoutSpecializationsInput
  characters: CharacterUpdateManyWithoutSpecializationsInput
  id: Int
  name: String
  skills: SkillUpdateManyWithoutSpecializationsInput
  talentTree: TalentTreeNodeUpdateManyWithoutSpecializationInput
}

input SpecializationUpdateWithoutTalentTreeDataInput {
  career: CareerUpdateOneWithoutSpecializationsInput
  characters: CharacterUpdateManyWithoutSpecializationsInput
  id: Int
  name: String
  skills: SkillUpdateManyWithoutSpecializationsInput
  talents: TalentUpdateManyWithoutSpecializationsInput
}

input SpecializationUpdateWithWhereUniqueWithoutCareerInput {
  data: SpecializationUpdateWithoutCareerDataInput!
  where: SpecializationWhereUniqueInput!
}

input SpecializationUpdateWithWhereUniqueWithoutCharactersInput {
  data: SpecializationUpdateWithoutCharactersDataInput!
  where: SpecializationWhereUniqueInput!
}

input SpecializationUpdateWithWhereUniqueWithoutSkillsInput {
  data: SpecializationUpdateWithoutSkillsDataInput!
  where: SpecializationWhereUniqueInput!
}

input SpecializationUpdateWithWhereUniqueWithoutTalentsInput {
  data: SpecializationUpdateWithoutTalentsDataInput!
  where: SpecializationWhereUniqueInput!
}

input SpecializationUpsertWithoutTalentTreeInput {
  create: SpecializationCreateWithoutTalentTreeInput!
  update: SpecializationUpdateWithoutTalentTreeDataInput!
}

input SpecializationUpsertWithWhereUniqueWithoutCareerInput {
  create: SpecializationCreateWithoutCareerInput!
  update: SpecializationUpdateWithoutCareerDataInput!
  where: SpecializationWhereUniqueInput!
}

input SpecializationUpsertWithWhereUniqueWithoutCharactersInput {
  create: SpecializationCreateWithoutCharactersInput!
  update: SpecializationUpdateWithoutCharactersDataInput!
  where: SpecializationWhereUniqueInput!
}

input SpecializationUpsertWithWhereUniqueWithoutSkillsInput {
  create: SpecializationCreateWithoutSkillsInput!
  update: SpecializationUpdateWithoutSkillsDataInput!
  where: SpecializationWhereUniqueInput!
}

input SpecializationUpsertWithWhereUniqueWithoutTalentsInput {
  create: SpecializationCreateWithoutTalentsInput!
  update: SpecializationUpdateWithoutTalentsDataInput!
  where: SpecializationWhereUniqueInput!
}

input SpecializationWhereInput {
  AND: [SpecializationWhereInput!]
  career: CareerWhereInput
  characters: CharacterFilter
  id: IntFilter
  name: StringFilter
  NOT: [SpecializationWhereInput!]
  OR: [SpecializationWhereInput!]
  skills: SkillFilter
  talents: TalentFilter
  talentTree: TalentTreeNodeFilter
}

input SpecializationWhereUniqueInput {
  id: Int
}

input StringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: String
  notIn: [String!]
  startsWith: String
}

enum System {
  AOR
  EOTE
  FAD
}

type Talent {
  activation: TalentActivation!
  description: String
  force: Boolean!
  id: Int!
  name: String!
  page: String
  ranked: Boolean!
  specializations(after: Int, before: Int, first: Int, last: Int, skip: Int): [Specialization!]!
}

enum TalentActivation {
  Action
  Incidental
  Maneuver
  OutOfTurn
  Passive
}

input TalentCreateManyWithoutTalentsInput {
  connect: [TalentWhereUniqueInput!]
  create: [TalentCreateWithoutSpecializationsInput!]
}

input TalentCreateOneWithoutTalentInput {
  connect: TalentWhereUniqueInput
  create: TalentCreateWithoutTalentTreeNodesInput
}

input TalentCreateWithoutSpecializationsInput {
  activation: TalentActivation!
  description: String
  force: Boolean!
  id: Int!
  name: String!
  page: String
  ranked: Boolean!
  talentTreeNodes: TalentTreeNodeCreateManyWithoutTalentTreeNodesInput
}

input TalentCreateWithoutTalentTreeNodesInput {
  activation: TalentActivation!
  description: String
  force: Boolean!
  id: Int!
  name: String!
  page: String
  ranked: Boolean!
  specializations: SpecializationCreateManyWithoutSpecializationsInput
}

input TalentFilter {
  every: TalentWhereInput
  none: TalentWhereInput
  some: TalentWhereInput
}

input TalentScalarWhereInput {
  activation: TalentActivation
  AND: [TalentScalarWhereInput!]
  description: NullableStringFilter
  force: BooleanFilter
  id: IntFilter
  name: StringFilter
  NOT: [TalentScalarWhereInput!]
  OR: [TalentScalarWhereInput!]
  page: NullableStringFilter
  ranked: BooleanFilter
  specializations: SpecializationFilter
  talentTreeNodes: TalentTreeNodeFilter
}

type TalentTreeNode {
  column: Int!
  connections: [Int!]!
  id: String!
  row: Int!
  talent: Talent!
}

input TalentTreeNodeCreateconnectionsInput {
  set: [Int!]
}

input TalentTreeNodeCreateManyWithoutTalentTreeInput {
  connect: [TalentTreeNodeWhereUniqueInput!]
  create: [TalentTreeNodeCreateWithoutSpecializationInput!]
}

input TalentTreeNodeCreateManyWithoutTalentTreeNodesInput {
  connect: [TalentTreeNodeWhereUniqueInput!]
  create: [TalentTreeNodeCreateWithoutTalentInput!]
}

input TalentTreeNodeCreateOneWithoutTalentInput {
  connect: TalentTreeNodeWhereUniqueInput
  create: TalentTreeNodeCreateWithoutCharacterTalentsInput
}

input TalentTreeNodeCreateWithoutCharacterTalentsInput {
  column: Int!
  connections: TalentTreeNodeCreateconnectionsInput
  id: String!
  row: Int!
  specialization: SpecializationCreateOneWithoutSpecializationInput!
  talent: TalentCreateOneWithoutTalentInput!
}

input TalentTreeNodeCreateWithoutSpecializationInput {
  characterTalents: CharacterTalentCreateManyWithoutCharacterTalentsInput
  column: Int!
  connections: TalentTreeNodeCreateconnectionsInput
  id: String!
  row: Int!
  talent: TalentCreateOneWithoutTalentInput!
}

input TalentTreeNodeCreateWithoutTalentInput {
  characterTalents: CharacterTalentCreateManyWithoutCharacterTalentsInput
  column: Int!
  connections: TalentTreeNodeCreateconnectionsInput
  id: String!
  row: Int!
  specialization: SpecializationCreateOneWithoutSpecializationInput!
}

input TalentTreeNodeFilter {
  every: TalentTreeNodeWhereInput
  none: TalentTreeNodeWhereInput
  some: TalentTreeNodeWhereInput
}

input TalentTreeNodeScalarWhereInput {
  AND: [TalentTreeNodeScalarWhereInput!]
  characterTalents: CharacterTalentFilter
  column: IntFilter
  id: StringFilter
  NOT: [TalentTreeNodeScalarWhereInput!]
  OR: [TalentTreeNodeScalarWhereInput!]
  row: IntFilter
}

input TalentTreeNodeUpdateconnectionsInput {
  set: [Int!]
}

input TalentTreeNodeUpdateManyDataInput {
  column: Int
  connections: TalentTreeNodeUpdateconnectionsInput
  id: String
  row: Int
}

input TalentTreeNodeUpdateManyWithoutSpecializationInput {
  connect: [TalentTreeNodeWhereUniqueInput!]
  create: [TalentTreeNodeCreateWithoutSpecializationInput!]
  delete: [TalentTreeNodeWhereUniqueInput!]
  deleteMany: [TalentTreeNodeScalarWhereInput!]
  disconnect: [TalentTreeNodeWhereUniqueInput!]
  set: [TalentTreeNodeWhereUniqueInput!]
  update: [TalentTreeNodeUpdateWithWhereUniqueWithoutSpecializationInput!]
  updateMany: [TalentTreeNodeUpdateManyWithWhereNestedInput!]
  upsert: [TalentTreeNodeUpsertWithWhereUniqueWithoutSpecializationInput!]
}

input TalentTreeNodeUpdateManyWithoutTalentInput {
  connect: [TalentTreeNodeWhereUniqueInput!]
  create: [TalentTreeNodeCreateWithoutTalentInput!]
  delete: [TalentTreeNodeWhereUniqueInput!]
  deleteMany: [TalentTreeNodeScalarWhereInput!]
  disconnect: [TalentTreeNodeWhereUniqueInput!]
  set: [TalentTreeNodeWhereUniqueInput!]
  update: [TalentTreeNodeUpdateWithWhereUniqueWithoutTalentInput!]
  updateMany: [TalentTreeNodeUpdateManyWithWhereNestedInput!]
  upsert: [TalentTreeNodeUpsertWithWhereUniqueWithoutTalentInput!]
}

input TalentTreeNodeUpdateManyWithWhereNestedInput {
  data: TalentTreeNodeUpdateManyDataInput!
  where: TalentTreeNodeScalarWhereInput!
}

input TalentTreeNodeUpdateOneRequiredWithoutCharacterTalentsInput {
  connect: TalentTreeNodeWhereUniqueInput
  create: TalentTreeNodeCreateWithoutCharacterTalentsInput
  update: TalentTreeNodeUpdateWithoutCharacterTalentsDataInput
  upsert: TalentTreeNodeUpsertWithoutCharacterTalentsInput
}

input TalentTreeNodeUpdateWithoutCharacterTalentsDataInput {
  column: Int
  connections: TalentTreeNodeUpdateconnectionsInput
  id: String
  row: Int
  specialization: SpecializationUpdateOneRequiredWithoutTalentTreeInput
  talent: TalentUpdateOneRequiredWithoutTalentTreeNodesInput
}

input TalentTreeNodeUpdateWithoutSpecializationDataInput {
  characterTalents: CharacterTalentUpdateManyWithoutTalentInput
  column: Int
  connections: TalentTreeNodeUpdateconnectionsInput
  id: String
  row: Int
  talent: TalentUpdateOneRequiredWithoutTalentTreeNodesInput
}

input TalentTreeNodeUpdateWithoutTalentDataInput {
  characterTalents: CharacterTalentUpdateManyWithoutTalentInput
  column: Int
  connections: TalentTreeNodeUpdateconnectionsInput
  id: String
  row: Int
  specialization: SpecializationUpdateOneRequiredWithoutTalentTreeInput
}

input TalentTreeNodeUpdateWithWhereUniqueWithoutSpecializationInput {
  data: TalentTreeNodeUpdateWithoutSpecializationDataInput!
  where: TalentTreeNodeWhereUniqueInput!
}

input TalentTreeNodeUpdateWithWhereUniqueWithoutTalentInput {
  data: TalentTreeNodeUpdateWithoutTalentDataInput!
  where: TalentTreeNodeWhereUniqueInput!
}

input TalentTreeNodeUpsertWithoutCharacterTalentsInput {
  create: TalentTreeNodeCreateWithoutCharacterTalentsInput!
  update: TalentTreeNodeUpdateWithoutCharacterTalentsDataInput!
}

input TalentTreeNodeUpsertWithWhereUniqueWithoutSpecializationInput {
  create: TalentTreeNodeCreateWithoutSpecializationInput!
  update: TalentTreeNodeUpdateWithoutSpecializationDataInput!
  where: TalentTreeNodeWhereUniqueInput!
}

input TalentTreeNodeUpsertWithWhereUniqueWithoutTalentInput {
  create: TalentTreeNodeCreateWithoutTalentInput!
  update: TalentTreeNodeUpdateWithoutTalentDataInput!
  where: TalentTreeNodeWhereUniqueInput!
}

input TalentTreeNodeWhereInput {
  AND: [TalentTreeNodeWhereInput!]
  characterTalents: CharacterTalentFilter
  column: IntFilter
  id: StringFilter
  NOT: [TalentTreeNodeWhereInput!]
  OR: [TalentTreeNodeWhereInput!]
  row: IntFilter
  specialization: SpecializationWhereInput
  talent: TalentWhereInput
}

input TalentTreeNodeWhereUniqueInput {
  id: String
}

input TalentUpdateManyDataInput {
  activation: TalentActivation
  description: String
  force: Boolean
  id: Int
  name: String
  page: String
  ranked: Boolean
}

input TalentUpdateManyWithoutSpecializationsInput {
  connect: [TalentWhereUniqueInput!]
  create: [TalentCreateWithoutSpecializationsInput!]
  delete: [TalentWhereUniqueInput!]
  deleteMany: [TalentScalarWhereInput!]
  disconnect: [TalentWhereUniqueInput!]
  set: [TalentWhereUniqueInput!]
  update: [TalentUpdateWithWhereUniqueWithoutSpecializationsInput!]
  updateMany: [TalentUpdateManyWithWhereNestedInput!]
  upsert: [TalentUpsertWithWhereUniqueWithoutSpecializationsInput!]
}

input TalentUpdateManyWithWhereNestedInput {
  data: TalentUpdateManyDataInput!
  where: TalentScalarWhereInput!
}

input TalentUpdateOneRequiredWithoutTalentTreeNodesInput {
  connect: TalentWhereUniqueInput
  create: TalentCreateWithoutTalentTreeNodesInput
  update: TalentUpdateWithoutTalentTreeNodesDataInput
  upsert: TalentUpsertWithoutTalentTreeNodesInput
}

input TalentUpdateWithoutSpecializationsDataInput {
  activation: TalentActivation
  description: String
  force: Boolean
  id: Int
  name: String
  page: String
  ranked: Boolean
  talentTreeNodes: TalentTreeNodeUpdateManyWithoutTalentInput
}

input TalentUpdateWithoutTalentTreeNodesDataInput {
  activation: TalentActivation
  description: String
  force: Boolean
  id: Int
  name: String
  page: String
  ranked: Boolean
  specializations: SpecializationUpdateManyWithoutTalentsInput
}

input TalentUpdateWithWhereUniqueWithoutSpecializationsInput {
  data: TalentUpdateWithoutSpecializationsDataInput!
  where: TalentWhereUniqueInput!
}

input TalentUpsertWithoutTalentTreeNodesInput {
  create: TalentCreateWithoutTalentTreeNodesInput!
  update: TalentUpdateWithoutTalentTreeNodesDataInput!
}

input TalentUpsertWithWhereUniqueWithoutSpecializationsInput {
  create: TalentCreateWithoutSpecializationsInput!
  update: TalentUpdateWithoutSpecializationsDataInput!
  where: TalentWhereUniqueInput!
}

input TalentWhereInput {
  activation: TalentActivation
  AND: [TalentWhereInput!]
  description: NullableStringFilter
  force: BooleanFilter
  id: IntFilter
  name: StringFilter
  NOT: [TalentWhereInput!]
  OR: [TalentWhereInput!]
  page: NullableStringFilter
  ranked: BooleanFilter
  specializations: SpecializationFilter
  talentTreeNodes: TalentTreeNodeFilter
}

input TalentWhereUniqueInput {
  id: Int
  name: String
}

type Threshold {
  current: Int!
  id: ID!
  threshold: Int!
}

input ThresholdCreateOneWithoutEncumberanceInput {
  connect: ThresholdWhereUniqueInput
  create: ThresholdCreateWithoutCharactersInput
}

input ThresholdCreateOneWithoutStrainInput {
  connect: ThresholdWhereUniqueInput
  create: ThresholdCreateWithoutStrainThresholdInput
}

input ThresholdCreateOneWithoutWoundsInput {
  connect: ThresholdWhereUniqueInput
  create: ThresholdCreateWithoutWoundsThresholdInput
}

input ThresholdCreateWithoutCharactersInput {
  current: Int!
  id: ID
  strainThreshold: DerivedAttributeCreateOneWithoutStrainThresholdInput
  threshold: Int!
  woundsThreshold: DerivedAttributeCreateOneWithoutWoundsThresholdInput
}

input ThresholdCreateWithoutStrainThresholdInput {
  characters: CharacterCreateManyWithoutCharactersInput
  current: Int!
  id: ID
  threshold: Int!
  woundsThreshold: DerivedAttributeCreateOneWithoutWoundsThresholdInput
}

input ThresholdCreateWithoutWoundsThresholdInput {
  characters: CharacterCreateManyWithoutCharactersInput
  current: Int!
  id: ID
  strainThreshold: DerivedAttributeCreateOneWithoutStrainThresholdInput
  threshold: Int!
}

input ThresholdUpdateOneRequiredWithoutStrainThresholdInput {
  connect: ThresholdWhereUniqueInput
  create: ThresholdCreateWithoutStrainThresholdInput
  update: ThresholdUpdateWithoutStrainThresholdDataInput
  upsert: ThresholdUpsertWithoutStrainThresholdInput
}

input ThresholdUpdateOneRequiredWithoutWoundsThresholdInput {
  connect: ThresholdWhereUniqueInput
  create: ThresholdCreateWithoutWoundsThresholdInput
  update: ThresholdUpdateWithoutWoundsThresholdDataInput
  upsert: ThresholdUpsertWithoutWoundsThresholdInput
}

input ThresholdUpdateOneWithoutCharactersInput {
  connect: ThresholdWhereUniqueInput
  create: ThresholdCreateWithoutCharactersInput
  delete: Boolean
  disconnect: Boolean
  update: ThresholdUpdateWithoutCharactersDataInput
  upsert: ThresholdUpsertWithoutCharactersInput
}

input ThresholdUpdateWithoutCharactersDataInput {
  current: Int
  id: ID
  strainThreshold: DerivedAttributeUpdateOneWithoutStrainInput
  threshold: Int
  woundsThreshold: DerivedAttributeUpdateOneWithoutWoundsInput
}

input ThresholdUpdateWithoutStrainThresholdDataInput {
  characters: CharacterUpdateManyWithoutEncumberanceInput
  current: Int
  id: ID
  threshold: Int
  woundsThreshold: DerivedAttributeUpdateOneWithoutWoundsInput
}

input ThresholdUpdateWithoutWoundsThresholdDataInput {
  characters: CharacterUpdateManyWithoutEncumberanceInput
  current: Int
  id: ID
  strainThreshold: DerivedAttributeUpdateOneWithoutStrainInput
  threshold: Int
}

input ThresholdUpsertWithoutCharactersInput {
  create: ThresholdCreateWithoutCharactersInput!
  update: ThresholdUpdateWithoutCharactersDataInput!
}

input ThresholdUpsertWithoutStrainThresholdInput {
  create: ThresholdCreateWithoutStrainThresholdInput!
  update: ThresholdUpdateWithoutStrainThresholdDataInput!
}

input ThresholdUpsertWithoutWoundsThresholdInput {
  create: ThresholdCreateWithoutWoundsThresholdInput!
  update: ThresholdUpdateWithoutWoundsThresholdDataInput!
}

input ThresholdWhereInput {
  AND: [ThresholdWhereInput!]
  characters: CharacterFilter
  current: IntFilter
  id: StringFilter
  NOT: [ThresholdWhereInput!]
  OR: [ThresholdWhereInput!]
  strainThreshold: DerivedAttributeWhereInput
  threshold: IntFilter
  woundsThreshold: DerivedAttributeWhereInput
}

input ThresholdWhereUniqueInput {
  id: ID
}

type User {
  characters(after: ID, before: ID, first: Int, last: Int, skip: Int): [Character!]!
  email: String!
  id: ID!
  name: String
}

input UserCreateOneWithoutUserInput {
  connect: UserWhereUniqueInput
  create: UserCreateWithoutCharactersInput
}

input UserCreateWithoutCharactersInput {
  email: String!
  id: ID
  name: String
  password: String!
}

input UserUpdateOneRequiredWithoutCharactersInput {
  connect: UserWhereUniqueInput
  create: UserCreateWithoutCharactersInput
  update: UserUpdateWithoutCharactersDataInput
  upsert: UserUpsertWithoutCharactersInput
}

input UserUpdateWithoutCharactersDataInput {
  email: String
  id: ID
  name: String
  password: String
}

input UserUpsertWithoutCharactersInput {
  create: UserCreateWithoutCharactersInput!
  update: UserUpdateWithoutCharactersDataInput!
}

input UserWhereInput {
  AND: [UserWhereInput!]
  characters: CharacterFilter
  email: StringFilter
  id: StringFilter
  name: NullableStringFilter
  NOT: [UserWhereInput!]
  OR: [UserWhereInput!]
  password: StringFilter
}

input UserWhereUniqueInput {
  email: String
  id: ID
}

type Weapon {
  attachments(after: ID, before: ID, first: Int, last: Int, skip: Int): [Attachment!]!
  condition: GearCondition
  critical: Int!
  damage: Int!
  description: String
  encumberance: Int!
  hardPoints: Int!
  id: ID!
  make: String
  name: String!
  quantity: Int!
  range: Range!
  rarity: Int!
  skill: WeaponSkill!
}

input WeaponCreateManyWithoutWeaponsInput {
  connect: [WeaponWhereUniqueInput!]
  create: [WeaponCreateWithoutCharacterInput!]
}

input WeaponCreateOneWithoutWeaponInput {
  connect: WeaponWhereUniqueInput
  create: WeaponCreateWithoutAttachmentsInput
}

input WeaponCreateWithoutAttachmentsInput {
  character: CharacterCreateOneWithoutCharacterInput
  condition: GearCondition
  critical: Int!
  damage: Int!
  description: String
  encumberance: Int
  hardPoints: Int
  id: ID
  make: String
  name: String!
  quantity: Int
  range: Range!
  rarity: Int
  skill: WeaponSkill!
}

input WeaponCreateWithoutCharacterInput {
  attachments: AttachmentCreateManyWithoutAttachmentsInput
  condition: GearCondition
  critical: Int!
  damage: Int!
  description: String
  encumberance: Int
  hardPoints: Int
  id: ID
  make: String
  name: String!
  quantity: Int
  range: Range!
  rarity: Int
  skill: WeaponSkill!
}

input WeaponFilter {
  every: WeaponWhereInput
  none: WeaponWhereInput
  some: WeaponWhereInput
}

input WeaponScalarWhereInput {
  AND: [WeaponScalarWhereInput!]
  attachments: AttachmentFilter
  condition: GearCondition
  critical: IntFilter
  damage: IntFilter
  description: NullableStringFilter
  encumberance: IntFilter
  hardPoints: IntFilter
  id: StringFilter
  make: NullableStringFilter
  name: StringFilter
  NOT: [WeaponScalarWhereInput!]
  OR: [WeaponScalarWhereInput!]
  quantity: IntFilter
  range: Range
  rarity: IntFilter
  skill: WeaponSkill
}

enum WeaponSkill {
  Brawl
  Gunnery
  Lightsaber
  Melee
  RangedHeavy
  RangedLight
}

input WeaponUpdateManyDataInput {
  condition: GearCondition
  critical: Int
  damage: Int
  description: String
  encumberance: Int
  hardPoints: Int
  id: ID
  make: String
  name: String
  quantity: Int
  range: Range
  rarity: Int
  skill: WeaponSkill
}

input WeaponUpdateManyWithoutCharacterInput {
  connect: [WeaponWhereUniqueInput!]
  create: [WeaponCreateWithoutCharacterInput!]
  delete: [WeaponWhereUniqueInput!]
  deleteMany: [WeaponScalarWhereInput!]
  disconnect: [WeaponWhereUniqueInput!]
  set: [WeaponWhereUniqueInput!]
  update: [WeaponUpdateWithWhereUniqueWithoutCharacterInput!]
  updateMany: [WeaponUpdateManyWithWhereNestedInput!]
  upsert: [WeaponUpsertWithWhereUniqueWithoutCharacterInput!]
}

input WeaponUpdateManyWithWhereNestedInput {
  data: WeaponUpdateManyDataInput!
  where: WeaponScalarWhereInput!
}

input WeaponUpdateOneWithoutAttachmentsInput {
  connect: WeaponWhereUniqueInput
  create: WeaponCreateWithoutAttachmentsInput
  delete: Boolean
  disconnect: Boolean
  update: WeaponUpdateWithoutAttachmentsDataInput
  upsert: WeaponUpsertWithoutAttachmentsInput
}

input WeaponUpdateWithoutAttachmentsDataInput {
  character: CharacterUpdateOneWithoutWeaponsInput
  condition: GearCondition
  critical: Int
  damage: Int
  description: String
  encumberance: Int
  hardPoints: Int
  id: ID
  make: String
  name: String
  quantity: Int
  range: Range
  rarity: Int
  skill: WeaponSkill
}

input WeaponUpdateWithoutCharacterDataInput {
  attachments: AttachmentUpdateManyWithoutWeaponInput
  condition: GearCondition
  critical: Int
  damage: Int
  description: String
  encumberance: Int
  hardPoints: Int
  id: ID
  make: String
  name: String
  quantity: Int
  range: Range
  rarity: Int
  skill: WeaponSkill
}

input WeaponUpdateWithWhereUniqueWithoutCharacterInput {
  data: WeaponUpdateWithoutCharacterDataInput!
  where: WeaponWhereUniqueInput!
}

input WeaponUpsertWithoutAttachmentsInput {
  create: WeaponCreateWithoutAttachmentsInput!
  update: WeaponUpdateWithoutAttachmentsDataInput!
}

input WeaponUpsertWithWhereUniqueWithoutCharacterInput {
  create: WeaponCreateWithoutCharacterInput!
  update: WeaponUpdateWithoutCharacterDataInput!
  where: WeaponWhereUniqueInput!
}

input WeaponWhereInput {
  AND: [WeaponWhereInput!]
  attachments: AttachmentFilter
  character: CharacterWhereInput
  condition: GearCondition
  critical: IntFilter
  damage: IntFilter
  description: NullableStringFilter
  encumberance: IntFilter
  hardPoints: IntFilter
  id: StringFilter
  make: NullableStringFilter
  name: StringFilter
  NOT: [WeaponWhereInput!]
  OR: [WeaponWhereInput!]
  quantity: IntFilter
  range: Range
  rarity: IntFilter
  skill: WeaponSkill
}

input WeaponWhereUniqueInput {
  id: ID
}
